// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  
  // Subscription and billing
  subscriptionId       String?
  subscriptionStatus   String?   @default("free")
  subscriptionPlan     String?   @default("free")
  subscriptionPeriodEnd DateTime?
  stripeCustomerId     String?   @unique
  
  // Usage tracking
  leadMagnetsCreated   Int       @default(0)
  leadsCollected       Int       @default(0)
  storageUsed          Int       @default(0) // in bytes
  
  // Preferences
  defaultBrand         Json?
  preferences          Json?
  
  // Timestamps
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  
  // Relations
  accounts             Account[]
  sessions             Session[]
  leadMagnets          LeadMagnet[]
  forms                Form[]
  leads                Lead[]
  templates            Template[]
  assets               Asset[]
  analytics            Analytics[]
  integrations         Integration[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model LeadMagnet {
  id          String   @id @default(cuid())
  title       String
  description String?
  type        String   // ebook, checklist, guide, worksheet, etc.
  status      String   @default("draft") // draft, published, archived
  
  // Design and content
  design      Json     // Fabric.js design data
  content     Json?    // Additional content data
  settings    Json?    // Export settings, branding, etc.
  
  // Template information
  templateId  String?
  template    Template? @relation(fields: [templateId], references: [id])
  
  // SEO and metadata
  slug        String?   @unique
  metaTitle   String?
  metaDescription String?
  tags        String[]
  
  // File storage
  pdfUrl      String?
  imageUrl    String?
  thumbnailUrl String?
  
  // Analytics
  views       Int      @default(0)
  downloads   Int      @default(0)
  conversions Int      @default(0)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  forms       Form[]
  leads       Lead[]
  analytics   Analytics[]
  
  @@index([userId])
  @@index([status])
  @@index([type])
}

model Template {
  id          String   @id @default(cuid())
  title       String
  description String?
  category    String   // ebook, checklist, guide, etc.
  industry    String?  // marketing, business, education, etc.
  
  // Template data
  design      Json     // Base design data
  preview     Json?    // Preview settings
  
  // Metadata
  tags        String[]
  isPremium   Boolean  @default(false)
  isPublic    Boolean  @default(true)
  
  // Usage statistics
  downloads   Int      @default(0)
  rating      Float?
  ratingCount Int      @default(0)
  
  // Media
  thumbnailUrl String?
  previewUrl   String?
  
  // Attribution
  authorId    String?
  author      User?    @relation(fields: [authorId], references: [id])
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  leadMagnets LeadMagnet[]
  
  @@index([category])
  @@index([isPublic])
  @@index([isPremium])
}

model Form {
  id          String   @id @default(cuid())
  title       String
  description String?
  
  // Form configuration
  fields      Json     // Form field definitions
  settings    Json?    // Validation, styling, behavior settings
  
  // Integration settings
  integrations Json?   // Email marketing platform integrations
  webhookUrl   String?
  
  // Thank you page
  thankYouPage Json?   // Thank you page configuration
  redirectUrl  String?
  
  // A/B testing
  variant      String?  @default("A")
  isActive     Boolean  @default(true)
  
  // Analytics
  views        Int      @default(0)
  submissions  Int      @default(0)
  conversionRate Float  @default(0)
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  leadMagnetId String?
  leadMagnet   LeadMagnet? @relation(fields: [leadMagnetId], references: [id])
  leads        Lead[]
  analytics    Analytics[]
  
  @@index([userId])
  @@index([leadMagnetId])
  @@index([isActive])
}

model Lead {
  id          String   @id @default(cuid())
  email       String
  
  // Lead data
  fields      Json     // Form field responses
  metadata    Json?    // Browser, location, referrer, etc.
  
  // Source tracking
  source      String?  // organic, paid, social, etc.
  campaign    String?
  medium      String?
  
  // Lead scoring
  score       Int?     @default(0)
  quality     String?  @default("unknown") // hot, warm, cold
  
  // Status
  status      String   @default("active") // active, unsubscribed, bounced
  
  // GDPR compliance
  consents    Json?    // Consent tracking
  ipAddress   String?
  userAgent   String?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  formId      String?
  form        Form?    @relation(fields: [formId], references: [id])
  leadMagnetId String?
  leadMagnet   LeadMagnet? @relation(fields: [leadMagnetId], references: [id])
  
  @@index([userId])
  @@index([email])
  @@index([formId])
  @@index([leadMagnetId])
  @@index([createdAt])
}

model Asset {
  id          String   @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        Int      // in bytes
  
  // Storage
  url         String
  key         String?  // S3 key or storage identifier
  
  // Metadata
  dimensions  Json?    // width, height for images
  alt         String?
  tags        String[]
  
  // Usage tracking
  usageCount  Int      @default(0)
  usedIn      String[] // IDs of lead magnets using this asset
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([mimeType])
}

model Analytics {
  id          String   @id @default(cuid())
  
  // Event tracking
  event       String   // view, download, conversion, etc.
  data        Json?    // Additional event data
  
  // Attribution
  source      String?
  medium      String?
  campaign    String?
  referrer    String?
  
  // User tracking (anonymous)
  sessionId   String?
  fingerprint String?
  ipAddress   String?
  userAgent   String?
  
  // Geographic data
  country     String?
  region      String?
  city        String?
  
  // Timestamps
  timestamp   DateTime @default(now())
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  leadMagnetId String?
  leadMagnet   LeadMagnet? @relation(fields: [leadMagnetId], references: [id])
  formId      String?
  form        Form?    @relation(fields: [formId], references: [id])
  
  @@index([userId])
  @@index([event])
  @@index([leadMagnetId])
  @@index([formId])
  @@index([timestamp])
}

model Integration {
  id          String   @id @default(cuid())
  provider    String   // mailchimp, convertkit, activecampaign, etc.
  
  // OAuth data
  accessToken String?  @db.Text
  refreshToken String? @db.Text
  expiresAt   DateTime?
  
  // Provider-specific data
  accountId   String?
  accountName String?
  settings    Json?
  
  // Status
  isActive    Boolean  @default(true)
  lastSync    DateTime?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, provider])
  @@index([userId])
  @@index([provider])
}