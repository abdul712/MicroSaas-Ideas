// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  name              String?
  image             String?
  emailVerified     DateTime?
  
  // Account management
  accounts          Account[]
  sessions          Session[]
  
  // Organization relationships
  organizationId    String?
  organization      Organization? @relation(fields: [organizationId], references: [id])
  
  // User preferences
  timezone          String   @default("UTC")
  isActive          Boolean  @default(true)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Organization {
  id                String   @id @default(cuid())
  name              String
  slug              String   @unique
  
  // Subscription details
  planId            String?
  subscriptionId    String?
  billingEmail      String?
  
  // Settings
  timezone          String   @default("UTC")
  isActive          Boolean  @default(true)
  
  // Relationships
  users             User[]
  emailAccounts     EmailAccount[]
  campaigns         Campaign[]
  subscriberSegments SubscriberSegment[]
  reports           Report[]
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("organizations")
}

model EmailAccount {
  id              String   @id @default(cuid())
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Provider details
  provider        EmailProvider
  accountName     String
  accountEmail    String?
  
  // OAuth credentials (encrypted)
  accessToken     String?  @db.Text
  refreshToken    String?  @db.Text
  tokenExpiresAt  DateTime?
  
  // API credentials (encrypted)
  apiKey          String?  @db.Text
  apiSecret       String?  @db.Text
  
  // Sync settings
  isActive        Boolean  @default(true)
  lastSyncAt      DateTime?
  syncFrequency   Int      @default(15) // minutes
  
  // Relationships
  campaigns       Campaign[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([organizationId, provider, accountEmail])
  @@map("email_accounts")
}

model Campaign {
  id              String   @id @default(cuid())
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  emailAccountId  String
  emailAccount    EmailAccount @relation(fields: [emailAccountId], references: [id], onDelete: Cascade)
  
  // Campaign details
  externalId      String   // ID from email provider
  name            String
  subjectLine     String?
  preheader       String?
  fromName        String?
  fromEmail       String?
  replyTo         String?
  
  // Campaign content
  htmlContent     String?  @db.Text
  textContent     String?  @db.Text
  
  // Campaign type and status
  type            CampaignType @default(REGULAR)
  status          CampaignStatus @default(DRAFT)
  
  // Timing
  sentAt          DateTime?
  scheduledAt     DateTime?
  
  // A/B Testing
  isAbTest        Boolean  @default(false)
  abTestVariant   String?
  abTestParentId  String?
  abTestParent    Campaign? @relation("ABTestVariants", fields: [abTestParentId], references: [id])
  abTestVariants  Campaign[] @relation("ABTestVariants")
  
  // Targeting
  audienceSize    Int?
  segmentIds      String[] // JSON array of segment IDs
  
  // Relationships
  metrics         CampaignMetrics?
  events          EmailEvent[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([emailAccountId, externalId])
  @@index([organizationId, sentAt])
  @@index([status, scheduledAt])
  @@map("campaigns")
}

model CampaignMetrics {
  id              String   @id @default(cuid())
  campaignId      String   @unique
  campaign        Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  // Delivery metrics
  totalSent       Int      @default(0)
  totalDelivered  Int      @default(0)
  totalBounced    Int      @default(0)
  hardBounces     Int      @default(0)
  softBounces     Int      @default(0)
  
  // Engagement metrics
  totalOpens      Int      @default(0)
  uniqueOpens     Int      @default(0)
  totalClicks     Int      @default(0)
  uniqueClicks    Int      @default(0)
  
  // Conversion metrics
  unsubscribes    Int      @default(0)
  spamReports     Int      @default(0)
  forwards        Int      @default(0)
  
  // Revenue metrics
  totalRevenue    Decimal? @db.Decimal(12,2)
  orderCount      Int      @default(0)
  avgOrderValue   Decimal? @db.Decimal(10,2)
  
  // Calculated rates (stored for performance)
  deliveryRate    Float?
  openRate        Float?
  clickRate       Float?
  unsubscribeRate Float?
  spamRate        Float?
  
  // Performance scoring
  engagementScore Float?
  revenueScore    Float?
  overallScore    Float?
  
  lastCalculatedAt DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("campaign_metrics")
}

model EmailEvent {
  id              String   @id @default(cuid())
  campaignId      String
  campaign        Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  // Event details
  eventType       EmailEventType
  subscriberId    String   // Email address or external subscriber ID
  
  // Event metadata
  timestamp       DateTime
  ipAddress       String?
  userAgent       String?
  location        String?  // Country/city
  device          String?  // Mobile/Desktop
  emailClient     String?  // Gmail/Outlook/etc
  
  // Click-specific data
  linkUrl         String?
  linkText        String?
  linkIndex       Int?
  
  // Bounce-specific data
  bounceType      String?  // hard/soft
  bounceReason    String?
  
  // Revenue data
  orderId         String?
  revenue         Decimal? @db.Decimal(10,2)
  
  // External IDs for deduplication
  externalId      String?
  
  createdAt       DateTime @default(now())

  @@unique([campaignId, subscriberId, eventType, timestamp])
  @@index([campaignId, eventType])
  @@index([subscriberId, eventType])
  @@index([timestamp])
  @@map("email_events")
}

model SubscriberSegment {
  id              String   @id @default(cuid())
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  name            String
  description     String?
  
  // Segment criteria (stored as JSON)
  criteria        Json
  
  // Computed fields
  subscriberCount Int      @default(0)
  isActive        Boolean  @default(true)
  
  // Auto-update settings
  isAutoUpdate    Boolean  @default(true)
  lastUpdatedAt   DateTime @default(now())
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("subscriber_segments")
}

model Report {
  id              String   @id @default(cuid())
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  name            String
  description     String?
  
  // Report configuration
  type            ReportType
  frequency       ReportFrequency @default(MANUAL)
  config          Json     // Report-specific configuration
  
  // Schedule settings
  scheduledAt     DateTime?
  lastGeneratedAt DateTime?
  nextRunAt       DateTime?
  
  // Delivery settings
  recipients      String[] // Email addresses
  isActive        Boolean  @default(true)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("reports")
}

// Enums
enum EmailProvider {
  MAILCHIMP
  SENDGRID
  KLAVIYO
  CONVERTKIT
  ACTIVECAMPAIGN
  CONSTANTCONTACT
  HUBSPOT
  MAILGUN
  SENDINBLUE
  CUSTOM
}

enum CampaignType {
  REGULAR
  AUTOMATION
  RSS
  TRANSACTIONAL
  AB_TEST
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  PAUSED
  CANCELLED
}

enum EmailEventType {
  SENT
  DELIVERED
  OPENED
  CLICKED
  UNSUBSCRIBED
  BOUNCED
  SPAM_REPORT
  FORWARD
  PURCHASE
}

enum ReportType {
  CAMPAIGN_PERFORMANCE
  SUBSCRIBER_GROWTH
  REVENUE_ATTRIBUTION
  ENGAGEMENT_TRENDS
  DELIVERABILITY
  BENCHMARK_COMPARISON
  CUSTOM
}

enum ReportFrequency {
  MANUAL
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
}