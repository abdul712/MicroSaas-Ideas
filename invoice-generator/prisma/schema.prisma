// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  password          String
  firstName         String?
  lastName          String?
  company           String?
  phone             String?
  address           String?
  city              String?
  state             String?
  country           String?
  postalCode        String?
  taxNumber         String?
  website           String?
  logo              String?
  primaryColor      String    @default("#3B82F6")
  secondaryColor    String    @default("#1E40AF")
  timezone          String    @default("UTC")
  currency          String    @default("USD")
  emailVerified     DateTime?
  isActive          Boolean   @default(true)
  subscriptionTier  String    @default("free") // free, professional, business, enterprise
  subscriptionEnds  DateTime?
  stripeCustomerId  String?   @unique
  stripeSubscriptionId String? @unique
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  businesses        Business[]
  invoices          Invoice[]
  clients           Client[]
  templates         Template[]
  payments          Payment[]
  subscriptions     Subscription[]
  notifications     Notification[]
  auditLogs         AuditLog[]

  @@map("users")
}

model Business {
  id             String  @id @default(cuid())
  userId         String
  name           String
  email          String?
  phone          String?
  address        String?
  city           String?
  state          String?
  country        String?
  postalCode     String?
  taxNumber      String?
  website        String?
  logo           String?
  primaryColor   String  @default("#3B82F6")
  secondaryColor String  @default("#1E40AF")
  isDefault      Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relations
  invoices Invoice[]

  @@map("businesses")
}

model Client {
  id               String    @id @default(cuid())
  userId           String
  businessId       String?
  firstName        String
  lastName         String?
  company          String?
  email            String
  phone            String?
  address          String?
  city             String?
  state            String?
  country          String?
  postalCode       String?
  taxNumber        String?
  website          String?
  notes            String?
  paymentTerms     Int       @default(30) // days
  creditLimit      Decimal   @default(0) @db.Decimal(10, 2)
  isActive         Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relations
  invoices         Invoice[]
  payments         Payment[]
  recurringInvoices RecurringInvoice[]

  @@map("clients")
}

model Invoice {
  id                String        @id @default(cuid())
  userId            String
  businessId        String?
  clientId          String
  invoiceNumber     String        @unique
  title             String?
  status            InvoiceStatus @default(DRAFT)
  currency          String        @default("USD")
  exchangeRate      Decimal       @default(1) @db.Decimal(10, 4)
  subtotal          Decimal       @default(0) @db.Decimal(10, 2)
  taxAmount         Decimal       @default(0) @db.Decimal(10, 2)
  discountAmount    Decimal       @default(0) @db.Decimal(10, 2)
  total             Decimal       @default(0) @db.Decimal(10, 2)
  paidAmount        Decimal       @default(0) @db.Decimal(10, 2)
  dueAmount         Decimal       @default(0) @db.Decimal(10, 2)
  notes             String?
  terms             String?
  footer            String?
  publicId          String        @unique @default(cuid())
  templateId        String?
  issueDate         DateTime      @default(now())
  dueDate           DateTime
  paidDate          DateTime?
  sentDate          DateTime?
  viewedDate        DateTime?
  reminderSentDate  DateTime?
  lastReminderDate  DateTime?
  reminderCount     Int           @default(0)
  attachments       String[]      @default([])
  metadata          Json?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  business Business? @relation(fields: [businessId], references: [id], onDelete: SetNull)
  client   Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  template Template? @relation(fields: [templateId], references: [id], onDelete: SetNull)

  // Relations
  items             InvoiceItem[]
  payments          Payment[]
  taxes             InvoiceTax[]
  discounts         InvoiceDiscount[]
  recurringInvoice  RecurringInvoice?

  @@map("invoices")
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoiceId   String
  description String
  quantity    Decimal @db.Decimal(10, 2)
  rate        Decimal @db.Decimal(10, 2)
  amount      Decimal @db.Decimal(10, 2)
  taxRate     Decimal @default(0) @db.Decimal(5, 2)
  order       Int     @default(0)

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}

model InvoiceTax {
  id        String  @id @default(cuid())
  invoiceId String
  name      String
  rate      Decimal @db.Decimal(5, 2)
  amount    Decimal @db.Decimal(10, 2)

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_taxes")
}

model InvoiceDiscount {
  id        String      @id @default(cuid())
  invoiceId String
  name      String
  type      DiscountType
  value     Decimal     @db.Decimal(10, 2)
  amount    Decimal     @db.Decimal(10, 2)

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_discounts")
}

model Payment {
  id              String        @id @default(cuid())
  userId          String
  invoiceId       String
  clientId        String
  amount          Decimal       @db.Decimal(10, 2)
  currency        String        @default("USD")
  exchangeRate    Decimal       @default(1) @db.Decimal(10, 4)
  method          PaymentMethod
  status          PaymentStatus @default(PENDING)
  transactionId   String?
  stripePaymentId String?       @unique
  notes           String?
  paidDate        DateTime      @default(now())
  processedDate   DateTime?
  metadata        Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  client  Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model RecurringInvoice {
  id              String                @id @default(cuid())
  invoiceId       String                @unique
  clientId        String
  frequency       RecurringFrequency
  interval        Int                   @default(1)
  startDate       DateTime
  endDate         DateTime?
  nextInvoiceDate DateTime
  isActive        Boolean               @default(true)
  totalGenerated  Int                   @default(0)
  maxInvoices     Int?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  client  Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("recurring_invoices")
}

model Template {
  id          String  @id @default(cuid())
  userId      String?
  name        String
  description String?
  design      Json
  isDefault   Boolean @default(false)
  isPublic    Boolean @default(false)
  category    String?
  thumbnail   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relations
  invoices Invoice[]

  @@map("templates")
}

model Subscription {
  id                 String             @id @default(cuid())
  userId             String
  tier               SubscriptionTier
  status             SubscriptionStatus
  stripeSubscriptionId String?         @unique
  stripePriceId      String?
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean           @default(false)
  canceledAt         DateTime?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?
  read      Boolean          @default(false)
  readAt    DateTime?
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  entity    String
  entityId  String?
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

// Enums
enum InvoiceStatus {
  DRAFT
  SENT
  VIEWED
  OVERDUE
  PAID
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CHECK
  BANK_TRANSFER
  CREDIT_CARD
  PAYPAL
  STRIPE
  OTHER
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

enum RecurringFrequency {
  WEEKLY
  BIWEEKLY
  MONTHLY
  QUARTERLY
  SEMI_ANNUALLY
  ANNUALLY
}

enum SubscriptionTier {
  FREE
  PROFESSIONAL
  BUSINESS
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
  UNPAID
  INCOMPLETE
}

enum NotificationType {
  INVOICE_SENT
  INVOICE_VIEWED
  INVOICE_PAID
  INVOICE_OVERDUE
  PAYMENT_RECEIVED
  PAYMENT_FAILED
  SUBSCRIPTION_RENEWED
  SUBSCRIPTION_CANCELLED
  SYSTEM_ALERT
}