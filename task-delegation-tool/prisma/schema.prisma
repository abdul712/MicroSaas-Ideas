// AI-Enhanced Task Delegation Platform Database Schema
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "vectorExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [pgvector(map: "vector"), pg_trgm]
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  domain    String?
  planType  String   @default("free") // free, team, business, enterprise
  timezone  String   @default("UTC")
  settings  Json     @default("{}")
  
  // AI Configuration
  aiSettings Json @default("{}")
  
  // Subscription
  stripeCustomerId       String?
  stripeSubscriptionId   String?
  subscriptionStatus     String?
  subscriptionPeriodEnd  DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  users          User[]
  teams          Team[]
  tasks          Task[]
  projects       Project[]
  templates      TaskTemplate[]
  integrations   Integration[]
  auditLogs      AuditLog[]
  
  @@map("organizations")
}

model User {
  id             String   @id @default(cuid())
  organizationId String
  email          String   @unique
  name           String?
  avatar         String?
  role           String   @default("member") // admin, manager, member, viewer
  status         String   @default("active") // active, inactive, suspended
  timezone       String   @default("UTC")
  
  // Authentication
  emailVerified     DateTime?
  hashedPassword    String?
  twoFactorEnabled  Boolean @default(false)
  twoFactorSecret   String?
  
  // AI Profile
  skills         Json     @default("[]")
  workingHours   Json     @default("{}")
  capacityHours  Int      @default(40)
  cognitiveLoad  Float    @default(0.5)
  
  // Behavioral Science
  workingStyle      String   @default("balanced") // focused, collaborative, balanced
  communicationPref String   @default("moderate") // minimal, moderate, frequent
  delegationStyle   String   @default("balanced") // detailed, brief, balanced
  
  // Performance Metrics
  completionRate    Float    @default(0.8)
  averageResponseTime Int    @default(3600) // seconds
  qualityScore      Float    @default(4.0)
  
  // Preferences
  notificationSettings Json @default("{}")
  dashboardSettings    Json @default("{}")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastActive DateTime @default(now())
  
  // Relations
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  teamMemberships   TeamMember[]
  
  // Task Relations
  tasksCreated      Task[] @relation("TaskCreator")
  tasksAssigned     Task[] @relation("TaskAssignee")
  taskUpdates       TaskUpdate[]
  taskComments      TaskComment[]
  
  // Delegation Relations
  delegations       Delegation[] @relation("Delegator")
  receivedDelegations Delegation[] @relation("Assignee")
  
  // AI Training Data
  taskPerformance   TaskPerformance[]
  workloadHistory   WorkloadHistory[]
  
  sessions          Session[]
  accounts          Account[]
  
  @@unique([organizationId, email])
  @@map("users")
}

model Team {
  id             String   @id @default(cuid())
  organizationId String
  name           String
  description    String?
  leaderId       String?
  settings       Json     @default("{}")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  members      TeamMember[]
  tasks        Task[]
  projects     Project[]
  
  @@map("teams")
}

model TeamMember {
  id     String @id @default(cuid())
  teamId String
  userId String
  role   String @default("member") // lead, member
  
  joinedAt DateTime @default(now())
  
  // Relations
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([teamId, userId])
  @@map("team_members")
}

model Project {
  id             String   @id @default(cuid())
  organizationId String
  teamId         String?
  name           String
  description    String?
  status         String   @default("active") // active, completed, archived, cancelled
  priority       String   @default("medium") // urgent, high, medium, low
  
  startDate DateTime?
  dueDate   DateTime?
  
  settings  Json @default("{}")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  team         Team?        @relation(fields: [teamId], references: [id])
  tasks        Task[]
  
  @@map("projects")
}

model Task {
  id             String   @id @default(cuid())
  organizationId String
  projectId      String?
  teamId         String?
  creatorId      String
  assigneeId     String?
  
  title          String
  description    String?
  status         String   @default("todo") // todo, in_progress, review, blocked, completed, cancelled
  priority       String   @default("medium") // urgent, high, medium, low
  
  // AI Enhancements
  complexity     Float?   // 0.1-1.0 calculated by AI
  skillsRequired Json     @default("[]")
  estimatedHours Float?
  confidenceScore Float?  // AI confidence in estimates
  
  // Dates
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  dueDate      DateTime?
  startedAt    DateTime?
  completedAt  DateTime?
  
  // Metadata
  tags         Json      @default("[]")
  attachments  Json      @default("[]")
  checklistItems Json    @default("[]")
  
  // Behavioral Science
  flowStateOptimal Boolean @default(false)
  cognitiveLoadImpact Float @default(0.5)
  interruptionRisk    Float @default(0.3)
  
  // Relations
  organization    Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  project         Project?        @relation(fields: [projectId], references: [id])
  team            Team?           @relation(fields: [teamId], references: [id])
  creator         User            @relation("TaskCreator", fields: [creatorId], references: [id])
  assignee        User?           @relation("TaskAssignee", fields: [assigneeId], references: [id])
  
  updates         TaskUpdate[]
  comments        TaskComment[]
  dependencies    TaskDependency[] @relation("TaskDependency")
  dependents      TaskDependency[] @relation("DependentTask")
  delegations     Delegation[]
  performance     TaskPerformance[]
  
  @@map("tasks")
}

model TaskTemplate {
  id             String   @id @default(cuid())
  organizationId String
  creatorId      String?
  
  name           String
  description    String?
  defaultTitle   String
  defaultDescription String?
  
  // Template Configuration
  estimatedHours Float?
  priority       String   @default("medium")
  skillsRequired Json     @default("[]")
  checklistItems Json     @default("[]")
  tags           Json     @default("[]")
  
  // AI Learning
  usageCount     Int      @default(0)
  successRate    Float    @default(0.8)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@map("task_templates")
}

model TaskUpdate {
  id     String @id @default(cuid())
  taskId String
  userId String
  type   String // status_change, progress, comment, blocker, time_log
  
  content     String?
  previousValue String?
  newValue      String?
  metadata      Json @default("{}")
  
  createdAt DateTime @default(now())
  
  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("task_updates")
}

model TaskComment {
  id     String @id @default(cuid())
  taskId String
  userId String
  
  content   String
  mentions  Json @default("[]")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("task_comments")
}

model TaskDependency {
  id            String @id @default(cuid())
  taskId        String // The task that depends
  dependsOnId   String // The task it depends on
  type          String @default("finish_to_start") // finish_to_start, start_to_start, etc.
  
  createdAt DateTime @default(now())
  
  // Relations
  task      Task @relation("TaskDependency", fields: [taskId], references: [id], onDelete: Cascade)
  dependsOn Task @relation("DependentTask", fields: [dependsOnId], references: [id], onDelete: Cascade)
  
  @@unique([taskId, dependsOnId])
  @@map("task_dependencies")
}

model Delegation {
  id         String @id @default(cuid())
  taskId     String
  delegatorId String
  assigneeId String
  
  status     String @default("pending") // pending, accepted, declined, reassigned
  message    String?
  
  // AI Insights
  matchScore Float? // How well the assignment matches
  riskScore  Float? // Risk of failure/delays
  
  createdAt  DateTime  @default(now())
  respondedAt DateTime?
  
  // Relations
  task      Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  delegator User @relation("Delegator", fields: [delegatorId], references: [id], onDelete: Cascade)
  assignee  User @relation("Assignee", fields: [assigneeId], references: [id], onDelete: Cascade)
  
  @@map("delegations")
}

// AI Performance Tracking
model TaskPerformance {
  id     String @id @default(cuid())
  taskId String
  userId String
  
  // Performance Metrics
  actualHours    Float?
  estimatedHours Float?
  qualityScore   Float?
  onTimeCompletion Boolean?
  
  // Behavioral Data
  workingHours   Json @default("[]") // Time slots when worked
  interruptions  Int  @default(0)
  focusTime      Float? // Hours in flow state
  
  // AI Training Data
  features       Json @default("{}")  // Feature vector for ML
  embedding      String? // Vector embedding for similarity
  
  createdAt DateTime @default(now())
  
  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([taskId, userId])
  @@map("task_performance")
}

model WorkloadHistory {
  id     String @id @default(cuid())
  userId String
  date   DateTime
  
  // Workload Metrics
  plannedHours   Float @default(0)
  actualHours    Float @default(0)
  taskCount      Int   @default(0)
  completedTasks Int   @default(0)
  
  // Cognitive Load
  cognitiveLoad  Float @default(0.5)
  stressLevel    Float @default(0.5)
  
  // Performance
  productivityScore Float @default(0.8)
  focusScore       Float @default(0.8)
  
  createdAt DateTime @default(now())
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, date])
  @@map("workload_history")
}

// Real-time Features
model Notification {
  id       String @id @default(cuid())
  userId   String
  type     String // task_assigned, task_updated, deadline_reminder, etc.
  title    String
  message  String
  data     Json   @default("{}")
  
  read     Boolean @default(false)
  
  createdAt DateTime @default(now())
  readAt    DateTime?
  
  @@map("notifications")
}

// Integrations
model Integration {
  id             String @id @default(cuid())
  organizationId String
  
  type       String // slack, teams, google, calendar, etc.
  name       String
  config     Json   @default("{}")
  tokens     Json   @default("{}")
  
  active     Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@unique([organizationId, type])
  @@map("integrations")
}

// Audit and Compliance
model AuditLog {
  id             String @id @default(cuid())
  organizationId String
  userId         String?
  
  action     String // create, update, delete, login, etc.
  resource   String // task, user, organization, etc.
  resourceId String?
  
  metadata   Json @default("{}")
  ipAddress  String?
  userAgent  String?
  
  createdAt DateTime @default(now())
  
  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@map("audit_logs")
}

// Authentication Models (NextAuth)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}