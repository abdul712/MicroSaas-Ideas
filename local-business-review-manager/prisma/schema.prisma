// Prisma schema for Local Business Review Manager
// Multi-tenant architecture with enterprise-grade features

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authentication and User Management
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(OWNER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts   Account[]
  sessions   Session[]
  businesses Business[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Business and Location Management
model Business {
  id          String   @id @default(cuid())
  name        String
  description String?
  website     String?
  phone       String?
  email       String?
  category    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Owner relationship
  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  // Related entities
  locations         Location[]
  reviewTemplates   ReviewTemplate[]
  alertSettings     AlertSetting[]
  subscriptions     Subscription[]
  analyticsReports  AnalyticsReport[]
  integrationTokens IntegrationToken[]

  @@map("businesses")
}

model Location {
  id          String   @id @default(cuid())
  name        String
  address     String?
  city        String?
  state       String?
  zipCode     String?
  country     String   @default("US")
  latitude    Float?
  longitude   Float?
  timezone    String   @default("America/New_York")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Business relationship
  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  // Platform-specific IDs stored as JSON
  platformIds Json?

  // Related entities
  reviews          Review[]
  analyticsReports AnalyticsReport[]

  @@map("locations")
}

// Review Management
model Review {
  id                 String         @id @default(cuid())
  platformReviewId   String         @unique
  platform           ReviewPlatform
  authorName         String?
  authorAvatar       String?
  rating             Int
  title              String?
  content            String?
  postedAt           DateTime
  isPublic           Boolean        @default(true)
  sentimentScore     Float?
  sentimentLabel     String?
  hasResponse        Boolean        @default(false)
  responseText       String?
  responsePostedAt   DateTime?
  isAutoGenerated    Boolean        @default(false)
  status             ReviewStatus   @default(NEW)
  priority           Priority       @default(MEDIUM)
  tags               String[]
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  // Location relationship
  locationId String
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  // Related entities
  responses ReviewResponse[]

  @@index([platform, postedAt])
  @@index([rating, postedAt])
  @@index([status, priority])
  @@map("reviews")
}

model ReviewResponse {
  id              String             @id @default(cuid())
  content         String
  isPublished     Boolean            @default(false)
  publishedAt     DateTime?
  responseType    ReviewResponseType @default(MANUAL)
  templateUsed    String?
  publishError    String?
  retryCount      Int                @default(0)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  // Review relationship
  reviewId String
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@map("review_responses")
}

model ReviewTemplate {
  id          String         @id @default(cuid())
  name        String
  category    TemplateType
  content     String
  variables   String[]
  usageCount  Int            @default(0)
  rating      Int?
  platform    ReviewPlatform?
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Business relationship
  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("review_templates")
}

// Alert and Notification System
model AlertSetting {
  id         String      @id @default(cuid())
  name       String
  alertType  AlertType
  conditions Json
  channels   Json // {email: true, sms: false, webhook: "url"}
  isActive   Boolean     @default(true)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  // Business relationship
  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("alert_settings")
}

// Analytics and Reporting
model AnalyticsReport {
  id         String               @id @default(cuid())
  reportType AnalyticsReportType
  period     String // "daily", "weekly", "monthly"
  startDate  DateTime
  endDate    DateTime
  data       Json
  createdAt  DateTime             @default(now())

  // Business relationship
  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  // Location relationship (optional for business-wide reports)
  locationId String?
  location   Location? @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@index([reportType, period, startDate])
  @@map("analytics_reports")
}

// Integration and Platform Management
model IntegrationToken {
  id             String             @id @default(cuid())
  platform       ReviewPlatform
  accessToken    String             @db.Text
  refreshToken   String?            @db.Text
  expiresAt      DateTime?
  isActive       Boolean            @default(true)
  lastSyncAt     DateTime?
  syncStatus     IntegrationStatus  @default(CONNECTED)
  errorMessage   String?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  // Business relationship
  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([businessId, platform])
  @@map("integration_tokens")
}

// Subscription and Billing
model Subscription {
  id                String             @id @default(cuid())
  stripeCustomerId  String             @unique
  stripePriceId     String
  stripeProductId   String
  status            SubscriptionStatus
  currentPeriodEnd  DateTime
  currentPeriodStart DateTime
  cancelAtPeriodEnd Boolean            @default(false)
  trialEnd          DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  // Business relationship
  businessId String   @unique
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

// Audit and Compliance
model AuditLog {
  id         String   @id @default(cuid())
  entityType String
  entityId   String
  action     String
  changes    Json?
  userId     String?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  @@index([entityType, entityId])
  @@index([userId, createdAt])
  @@map("audit_logs")
}

// Enums
enum UserRole {
  OWNER
  MANAGER
  STAFF
}

enum ReviewPlatform {
  GOOGLE
  YELP
  FACEBOOK
  TRIPADVISOR
  TRUSTPILOT
  FOURSQUARE
  CUSTOM
}

enum ReviewStatus {
  NEW
  REVIEWED
  RESPONDED
  ESCALATED
  RESOLVED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ReviewResponseType {
  MANUAL
  AI_GENERATED
  TEMPLATE
}

enum TemplateType {
  POSITIVE
  NEGATIVE
  NEUTRAL
  THANK_YOU
  APOLOGY
  FOLLOW_UP
}

enum AlertType {
  NEW_REVIEW
  NEGATIVE_REVIEW
  RESPONSE_NEEDED
  RATING_DROP
  COMPETITOR_UPDATE
  PLATFORM_ERROR
}

enum AnalyticsReportType {
  DAILY_SUMMARY
  WEEKLY_SUMMARY
  MONTHLY_SUMMARY
  SENTIMENT_ANALYSIS
  COMPETITOR_COMPARISON
  PLATFORM_PERFORMANCE
  RESPONSE_PERFORMANCE
}

enum IntegrationStatus {
  CONNECTED
  DISCONNECTED
  ERROR
  EXPIRED
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  TRIALING
}