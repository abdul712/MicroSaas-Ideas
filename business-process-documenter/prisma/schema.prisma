generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(MEMBER)
  
  // Organization relationship
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  
  // Relations
  accounts           Account[]
  sessions           Session[]
  createdProcesses   Process[]        @relation("ProcessCreator")
  processExecutions  ProcessExecution[]
  approvals          ProcessApproval[]
  auditLogs          AuditLog[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  industry    String?
  planType    PlanType @default(STARTER)
  
  // Settings
  settings    Json?
  
  // Relations
  users       User[]
  processes   Process[]
  templates   Template[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Process {
  id             String        @id @default(cuid())
  title          String
  description    String?       @db.Text
  category       String?
  status         ProcessStatus @default(DRAFT)
  version        Int           @default(1)
  isPublic       Boolean       @default(false)
  
  // Content
  content        Json?         // Rich text content
  estimatedTime  Int?          // Minutes
  difficulty     Difficulty?   @default(BEGINNER)
  
  // Relationships
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  createdById    String
  createdBy      User @relation("ProcessCreator", fields: [createdById], references: [id])
  
  // Process structure
  steps          ProcessStep[]
  versions       ProcessVersion[]
  executions     ProcessExecution[]
  approvals      ProcessApproval[]
  mediaAssets    MediaAsset[]
  tags           ProcessTag[]
  
  // Metadata
  viewCount      Int @default(0)
  executionCount Int @default(0)
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@index([organizationId, status])
  @@index([createdById])
}

model ProcessStep {
  id          String      @id @default(cuid())
  processId   String
  process     Process     @relation(fields: [processId], references: [id], onDelete: Cascade)
  
  order       Int
  title       String
  description String?     @db.Text
  content     Json?       // Rich text content
  type        StepType    @default(ACTION)
  isRequired  Boolean     @default(true)
  
  // Time tracking
  estimatedTime Int?      // Minutes
  
  // Media
  mediaAssets   MediaAsset[]
  
  // Step executions
  executions    StepExecution[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([processId, order])
}

model ProcessVersion {
  id            String   @id @default(cuid())
  processId     String
  process       Process  @relation(fields: [processId], references: [id], onDelete: Cascade)
  
  versionNumber Int
  changes       String?  @db.Text
  content       Json     // Full process content snapshot
  
  createdAt     DateTime @default(now())
  
  @@unique([processId, versionNumber])
}

model ProcessExecution {
  id          String            @id @default(cuid())
  processId   String
  process     Process           @relation(fields: [processId], references: [id], onDelete: Cascade)
  
  userId      String
  user        User              @relation(fields: [userId], references: [id])
  
  status      ExecutionStatus   @default(IN_PROGRESS)
  notes       String?           @db.Text
  rating      Int?              // 1-5 rating
  feedback    String?           @db.Text
  
  // Time tracking
  startedAt   DateTime          @default(now())
  completedAt DateTime?
  totalTime   Int?              // Minutes spent
  
  // Step executions
  stepExecutions StepExecution[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([processId, status])
  @@index([userId])
}

model StepExecution {
  id                String           @id @default(cuid())
  processExecutionId String
  processExecution   ProcessExecution @relation(fields: [processExecutionId], references: [id], onDelete: Cascade)
  
  stepId            String
  step              ProcessStep      @relation(fields: [stepId], references: [id])
  
  status            ExecutionStatus  @default(PENDING)
  notes             String?          @db.Text
  timeSpent         Int?             // Minutes
  
  startedAt         DateTime?
  completedAt       DateTime?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([processExecutionId])
}

model ProcessApproval {
  id          String         @id @default(cuid())
  processId   String
  process     Process        @relation(fields: [processId], references: [id], onDelete: Cascade)
  
  userId      String
  user        User           @relation(fields: [userId], references: [id])
  
  status      ApprovalStatus @default(PENDING)
  comments    String?        @db.Text
  
  approvedAt  DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([processId, userId])
}

model Template {
  id             String       @id @default(cuid())
  title          String
  description    String?      @db.Text
  category       String
  industry       String?
  
  // Template content
  content        Json         // Process structure
  thumbnail      String?
  
  // Visibility
  isPublic       Boolean      @default(false)
  isPremium      Boolean      @default(false)
  
  // Usage stats
  usageCount     Int          @default(0)
  rating         Float?       @default(0)
  
  // Relationships
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@index([category, isPublic])
  @@index([industry, isPublic])
}

model MediaAsset {
  id          String      @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        Int
  url         String
  
  // Relationships
  processId   String?
  process     Process?    @relation(fields: [processId], references: [id], onDelete: Cascade)
  
  stepId      String?
  step        ProcessStep? @relation(fields: [stepId], references: [id], onDelete: Cascade)
  
  // Metadata
  caption     String?
  altText     String?
  
  createdAt   DateTime @default(now())
  
  @@index([processId])
  @@index([stepId])
}

model ProcessTag {
  id        String  @id @default(cuid())
  name      String
  color     String?
  
  processId String
  process   Process @relation(fields: [processId], references: [id], onDelete: Cascade)
  
  @@unique([processId, name])
}

model AuditLog {
  id         String     @id @default(cuid())
  userId     String
  user       User       @relation(fields: [userId], references: [id])
  
  action     AuditAction
  entityType String
  entityId   String
  details    Json?
  
  ipAddress  String?
  userAgent  String?
  
  createdAt  DateTime @default(now())
  
  @@index([userId])
  @@index([entityType, entityId])
  @@index([createdAt])
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  MEMBER
  VIEWER
}

enum PlanType {
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum ProcessStatus {
  DRAFT
  UNDER_REVIEW
  APPROVED
  PUBLISHED
  ARCHIVED
}

enum StepType {
  ACTION
  DECISION
  INFORMATION
  APPROVAL
  NOTIFICATION
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum ExecutionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  SKIPPED
  FAILED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  NEEDS_REVISION
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  VIEW
  EXECUTE
  APPROVE
  REJECT
  PUBLISH
  ARCHIVE
}