// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts     Account[]
  sessions     Session[]
  sites        MembershipSite[]
  memberships  Membership[]
  payments     Payment[]
  activities   Activity[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model MembershipSite {
  id          String           @id @default(cuid())
  name        String
  slug        String           @unique
  domain      String?          @unique
  description String?
  logo        String?
  favicon     String?
  theme       Json?
  settings    Json?
  status      SiteStatus       @default(DRAFT)
  ownerId     String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  owner            User                @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  membershipTiers  MembershipTier[]
  memberships      Membership[]
  content          Content[]
  pages            Page[]
  subscriptions    Subscription[]
  analytics        Analytics[]
  discussions      Discussion[]
  events           Event[]
  webhooks         Webhook[]
}

model MembershipTier {
  id            String   @id @default(cuid())
  name          String
  description   String?
  price         Decimal
  billingPeriod BillingPeriod
  features      Json?
  stripePriceId String?
  isActive      Boolean  @default(true)
  sortOrder     Int      @default(0)
  siteId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  site          MembershipSite @relation(fields: [siteId], references: [id], onDelete: Cascade)
  memberships   Membership[]
  subscriptions Subscription[]
}

model Membership {
  id        String           @id @default(cuid())
  status    MembershipStatus @default(PENDING)
  userId    String
  siteId    String
  tierId    String?
  joinedAt  DateTime         @default(now())
  expiresAt DateTime?
  updatedAt DateTime         @updatedAt

  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  site         MembershipSite      @relation(fields: [siteId], references: [id], onDelete: Cascade)
  tier         MembershipTier?     @relation(fields: [tierId], references: [id], onDelete: SetNull)
  subscription Subscription?
  activities   Activity[]

  @@unique([userId, siteId])
}

model Subscription {
  id                  String           @id @default(cuid())
  stripeSubscriptionId String?          @unique
  status              SubscriptionStatus
  currentPeriodStart  DateTime
  currentPeriodEnd    DateTime
  cancelAtPeriodEnd   Boolean          @default(false)
  membershipId        String           @unique
  siteId              String
  tierId              String
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt

  membership Membership     @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  site       MembershipSite @relation(fields: [siteId], references: [id], onDelete: Cascade)
  tier       MembershipTier @relation(fields: [tierId], references: [id], onDelete: Cascade)
  payments   Payment[]
}

model Payment {
  id               String        @id @default(cuid())
  stripePaymentId  String?       @unique
  amount           Decimal
  currency         String        @default("usd")
  status           PaymentStatus
  description      String?
  subscriptionId   String?
  userId           String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)
}

model Content {
  id            String        @id @default(cuid())
  title         String
  slug          String
  body          String        @db.Text
  excerpt       String?
  accessLevel   AccessLevel   @default(PUBLIC)
  requiredTiers String[]      @default([])
  featuredImage String?
  status        ContentStatus @default(DRAFT)
  publishedAt   DateTime?
  siteId        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  site      MembershipSite @relation(fields: [siteId], references: [id], onDelete: Cascade)
  comments  Comment[]
  views     ContentView[]

  @@unique([siteId, slug])
}

model Page {
  id          String     @id @default(cuid())
  title       String
  slug        String
  content     String     @db.Text
  isHomePage  Boolean    @default(false)
  accessLevel AccessLevel @default(PUBLIC)
  seoTitle    String?
  seoDescription String?
  siteId      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  site MembershipSite @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@unique([siteId, slug])
}

model Comment {
  id        String   @id @default(cuid())
  body      String   @db.Text
  contentId String
  userId    String
  parentId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content Content   @relation(fields: [contentId], references: [id], onDelete: Cascade)
  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies Comment[] @relation("CommentReplies")
}

model ContentView {
  id        String   @id @default(cuid())
  contentId String
  userId    String?
  ipAddress String?
  userAgent String?
  viewedAt  DateTime @default(now())

  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
}

model Discussion {
  id        String   @id @default(cuid())
  title     String
  slug      String
  body      String   @db.Text
  isPinned  Boolean  @default(false)
  isLocked  Boolean  @default(false)
  siteId    String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  site    MembershipSite @relation(fields: [siteId], references: [id], onDelete: Cascade)
  replies DiscussionReply[]

  @@unique([siteId, slug])
}

model DiscussionReply {
  id           String   @id @default(cuid())
  body         String   @db.Text
  discussionId String
  authorId     String
  parentId     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  discussion Discussion        @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  parent     DiscussionReply?  @relation("ReplyReplies", fields: [parentId], references: [id])
  replies    DiscussionReply[] @relation("ReplyReplies")
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  startDate   DateTime
  endDate     DateTime?
  timezone    String   @default("UTC")
  isRecurring Boolean  @default(false)
  location    String?
  meetingUrl  String?
  maxAttendees Int?
  siteId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  site      MembershipSite @relation(fields: [siteId], references: [id], onDelete: Cascade)
  attendees EventAttendee[]
}

model EventAttendee {
  id       String @id @default(cuid())
  eventId  String
  userId   String
  status   AttendeeStatus @default(REGISTERED)
  joinedAt DateTime @default(now())

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
}

model Activity {
  id           String       @id @default(cuid())
  type         ActivityType
  description  String
  data         Json?
  userId       String
  membershipId String?
  createdAt    DateTime     @default(now())

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  membership Membership? @relation(fields: [membershipId], references: [id], onDelete: SetNull)
}

model Analytics {
  id        String      @id @default(cuid())
  type      AnalyticsType
  value     Decimal
  dimension String?
  date      DateTime
  siteId    String
  createdAt DateTime    @default(now())

  site MembershipSite @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@unique([type, dimension, date, siteId])
}

model Webhook {
  id        String      @id @default(cuid())
  url       String
  events    String[]
  secret    String?
  isActive  Boolean     @default(true)
  siteId    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  site MembershipSite @relation(fields: [siteId], references: [id], onDelete: Cascade)
}

// Enums
enum UserRole {
  USER
  ADMIN
}

enum SiteStatus {
  DRAFT
  PUBLISHED
  SUSPENDED
}

enum BillingPeriod {
  MONTHLY
  YEARLY
  LIFETIME
}

enum MembershipStatus {
  PENDING
  ACTIVE
  EXPIRED
  CANCELLED
  SUSPENDED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
  UNPAID
  INCOMPLETE
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELLED
  REFUNDED
}

enum AccessLevel {
  PUBLIC
  MEMBERS_ONLY
  TIER_SPECIFIC
  PREMIUM
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ActivityType {
  MEMBER_JOINED
  MEMBER_LEFT
  CONTENT_VIEWED
  COMMENT_POSTED
  SUBSCRIPTION_STARTED
  SUBSCRIPTION_CANCELLED
  PAYMENT_RECEIVED
  PAYMENT_FAILED
}

enum AnalyticsType {
  PAGE_VIEWS
  MEMBER_REGISTRATIONS
  REVENUE
  CONTENT_ENGAGEMENT
  CHURN_RATE
  CONVERSION_RATE
}

enum AttendeeStatus {
  REGISTERED
  ATTENDED
  CANCELLED
  NO_SHOW
}