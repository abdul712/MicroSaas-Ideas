// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Multi-tenant organization model
model Organization {
  id        String   @id @default(cuid())
  name      String
  domain    String?  @unique
  subdomain String?  @unique
  settings  Json?    // Organization-specific settings
  plan      String   @default("starter") // starter, professional, enterprise
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users         User[]
  tickets       Ticket[]
  departments   Department[]
  knowledgeBase KnowledgeBase[]
  tags          Tag[]
  templates     Template[]
  automations   Automation[]
  integrations  Integration[]

  @@map("organizations")
}

// User model with role-based access control
model User {
  id             String    @id @default(cuid())
  email          String    @unique
  name           String?
  avatar         String?
  password       String?
  emailVerified  DateTime?
  role           UserRole  @default(AGENT)
  status         UserStatus @default(ACTIVE)
  lastLoginAt    DateTime?
  preferences    Json?     // User preferences and settings
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Organization relationship
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Department relationships
  departments    UserDepartment[]

  // Ticket relationships
  assignedTickets    Ticket[] @relation("AssignedAgent")
  createdTickets     Ticket[] @relation("CreatedBy")
  ticketComments     Comment[]
  ticketActivities   Activity[]

  // Authentication
  accounts Account[]
  sessions Session[]

  @@map("users")
}

// Department for organizing agents
model Department {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String?  // Hex color for UI
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Organization relationship
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Relations
  users           UserDepartment[]
  tickets         Ticket[]
  automations     Automation[]

  @@map("departments")
}

// Many-to-many relationship between users and departments
model UserDepartment {
  id           String @id @default(cuid())
  userId       String
  departmentId String
  role         String @default("member") // member, manager

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  @@unique([userId, departmentId])
  @@map("user_departments")
}

// Core ticket model
model Ticket {
  id          String        @id @default(cuid())
  subject     String
  description String?
  status      TicketStatus  @default(OPEN)
  priority    TicketPriority @default(MEDIUM)
  source      TicketSource  @default(EMAIL)
  ticketNumber String       @unique // Human-readable ticket number like #12345

  // Customer information
  customerEmail String
  customerName  String?
  customerPhone String?

  // AI Analysis
  sentiment     String?      // positive, negative, neutral
  category      String?      // Auto-categorized by AI
  urgencyScore  Float?       // AI-calculated urgency score
  tags          TicketTag[]

  // Assignment
  assignedAgentId String?
  assignedAgent   User?       @relation("AssignedAgent", fields: [assignedAgentId], references: [id])
  departmentId    String?
  department      Department? @relation(fields: [departmentId], references: [id])

  // SLA tracking
  firstResponseAt DateTime?
  resolvedAt      DateTime?
  closedAt        DateTime?
  slaBreached     Boolean     @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Organization relationship
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Created by (can be customer or agent)
  createdById String?
  createdBy   User?   @relation("CreatedBy", fields: [createdById], references: [id])

  // Relations
  comments    Comment[]
  activities  Activity[]
  attachments Attachment[]

  @@map("tickets")
}

// Ticket comments/messages
model Comment {
  id        String      @id @default(cuid())
  content   String
  type      CommentType @default(PUBLIC) // public, private, internal
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relationships
  ticketId String
  ticket   Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  // Relations
  attachments Attachment[]

  @@map("comments")
}

// File attachments
model Attachment {
  id          String   @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        Int
  url         String
  createdAt   DateTime @default(now())

  // Can be attached to tickets or comments
  ticketId  String?
  ticket    Ticket?  @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@map("attachments")
}

// Activity log for audit trail
model Activity {
  id          String       @id @default(cuid())
  type        ActivityType
  description String
  metadata    Json?        // Additional activity data
  createdAt   DateTime     @default(now())

  // Relationships
  ticketId String
  ticket   Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  @@map("activities")
}

// Tags for ticket organization
model Tag {
  id    String @id @default(cuid())
  name  String
  color String @default("#6b7280") // Default gray color

  // Organization relationship
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Relations
  tickets TicketTag[]

  @@unique([name, organizationId])
  @@map("tags")
}

// Many-to-many relationship between tickets and tags
model TicketTag {
  id       String @id @default(cuid())
  ticketId String
  tagId    String

  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([ticketId, tagId])
  @@map("ticket_tags")
}

// Knowledge base for self-service
model KnowledgeBase {
  id          String   @id @default(cuid())
  title       String
  content     String
  category    String?
  status      String   @default("published") // draft, published, archived
  views       Int      @default(0)
  helpful     Int      @default(0)
  notHelpful  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Organization relationship
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("knowledge_base")
}

// Email/response templates
model Template {
  id          String       @id @default(cuid())
  name        String
  subject     String?
  content     String
  type        TemplateType @default(EMAIL)
  category    String?
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Organization relationship
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("templates")
}

// Automation rules
model Automation {
  id          String    @id @default(cuid())
  name        String
  description String?
  isActive    Boolean   @default(true)
  conditions  Json      // Rule conditions
  actions     Json      // Actions to take
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Organization relationship
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Department relationship (optional)
  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])

  @@map("automations")
}

// Third-party integrations
model Integration {
  id          String    @id @default(cuid())
  name        String
  type        String    // email, slack, webhook, etc.
  config      Json      // Integration configuration
  isActive    Boolean   @default(true)
  lastSyncAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Organization relationship
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("integrations")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  AGENT
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  PENDING
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketSource {
  EMAIL
  WEB_FORM
  CHAT
  PHONE
  SOCIAL
  API
}

enum CommentType {
  PUBLIC
  PRIVATE
  INTERNAL
}

enum ActivityType {
  CREATED
  ASSIGNED
  STATUS_CHANGED
  PRIORITY_CHANGED
  COMMENTED
  CLOSED
  REOPENED
  TAGGED
  DEPARTMENT_CHANGED
}

enum TemplateType {
  EMAIL
  SMS
  CHAT
  WEBHOOK
}