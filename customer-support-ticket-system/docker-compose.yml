version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: support_system
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and real-time features
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
        DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/support_system}
        NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-your-secret-key-change-in-production}
        NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
        OPENAI_API_KEY: ${OPENAI_API_KEY}
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/support_system}
      
      # NextAuth
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-your-secret-key-change-in-production}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      
      # OpenAI
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      
      # Redis
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
      
      # Email (SMTP)
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SUPPORT_FROM_EMAIL: ${SUPPORT_FROM_EMAIL}
      SUPPORT_FROM_NAME: ${SUPPORT_FROM_NAME:-Support Team}
      
      # Email (IMAP for reading)
      IMAP_HOST: ${IMAP_HOST:-imap.gmail.com}
      IMAP_PORT: ${IMAP_PORT:-993}
      IMAP_USER: ${IMAP_USER}
      IMAP_PASS: ${IMAP_PASS}
      
      # Email webhook
      EMAIL_WEBHOOK_SECRET: ${EMAIL_WEBHOOK_SECRET}
      
      # File storage
      UPLOAD_DIR: ${UPLOAD_DIR:-/app/uploads}
      
      # Application
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3000
      
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - uploads_data:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    profiles:
      - production

  # Email processor service (for processing incoming emails)
  email-processor:
    build:
      context: .
      dockerfile: Dockerfile.email-processor
    restart: unless-stopped
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/support_system}
      IMAP_HOST: ${IMAP_HOST:-imap.gmail.com}
      IMAP_PORT: ${IMAP_PORT:-993}
      IMAP_USER: ${IMAP_USER}
      IMAP_PASS: ${IMAP_PASS}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles:
      - email

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local

networks:
  default:
    name: support-system-network