// Customer Segmentation Tool - Database Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Multi-tenancy
model Tenant {
  id        String   @id @default(cuid())
  name      String
  settings  Json     @default("{}")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  users         User[]
  customers     Customer[]
  segments      Segment[]
  integrations  Integration[]
  campaigns     Campaign[]
  behaviorEvents BehaviorEvent[]

  @@map("tenants")
}

// User management
model User {
  id            String    @id @default(cuid())
  tenantId      String    @map("tenant_id")
  email         String    @unique
  name          String?
  image         String?
  role          UserRole  @default(MEMBER)
  emailVerified DateTime? @map("email_verified")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  tenant   Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Customer profiles
model Customer {
  id          String   @id @default(cuid())
  tenantId    String   @map("tenant_id")
  externalId  String   @map("external_id")
  email       String?
  firstName   String?  @map("first_name")
  lastName    String?  @map("last_name")
  phone       String?
  attributes  Json     @default("{}")
  rfmScores   Json     @default("{}") @map("rfm_scores")
  mlFeatures  Json     @default("{}") @map("ml_features")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  tenant              Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  segmentMemberships  SegmentMembership[]
  behaviorEvents      BehaviorEvent[]
  campaignInteractions CampaignInteraction[]

  @@unique([tenantId, externalId])
  @@index([tenantId, email])
  @@index([tenantId, createdAt])
  @@map("customers")
}

// Segmentation
model Segment {
  id             String      @id @default(cuid())
  tenantId       String      @map("tenant_id")
  name           String
  description    String?
  rules          Json        @default("[]")
  mlConfig       Json?       @map("ml_config")
  customerCount  Int         @default(0) @map("customer_count")
  isDynamic      Boolean     @default(true) @map("is_dynamic")
  isActive       Boolean     @default(true) @map("is_active")
  color          String      @default("#3B82F6")
  tags           String[]    @default([])
  lastUpdated    DateTime    @default(now()) @map("last_updated")
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")

  // Relations
  tenant         Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  memberships    SegmentMembership[]
  campaigns      Campaign[]

  @@index([tenantId, isActive])
  @@index([tenantId, isDynamic])
  @@map("segments")
}

model SegmentMembership {
  id         String   @id @default(cuid())
  segmentId  String   @map("segment_id")
  customerId String   @map("customer_id")
  score      Decimal? @db.Decimal(5, 4)
  assignedAt DateTime @default(now()) @map("assigned_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  segment  Segment  @relation(fields: [segmentId], references: [id], onDelete: Cascade)
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([segmentId, customerId])
  @@index([customerId])
  @@index([segmentId, score])
  @@map("segment_memberships")
}

// Behavior tracking
model BehaviorEvent {
  id          String   @id @default(cuid())
  customerId  String   @map("customer_id")
  tenantId    String   @map("tenant_id")
  eventType   String   @map("event_type")
  properties  Json     @default("{}")
  occurredAt  DateTime @map("occurred_at")
  processedAt DateTime @default(now()) @map("processed_at")

  // Relations
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  tenant   Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([customerId, occurredAt])
  @@index([tenantId, eventType])
  @@index([tenantId, occurredAt])
  @@map("behavior_events")
}

// Integrations
model Integration {
  id       String @id @default(cuid())
  tenantId String @map("tenant_id")
  provider String
  name     String
  config   Json   @default("{}")
  isActive Boolean @default(true) @map("is_active")
  lastSync DateTime? @map("last_sync")
  syncStatus String @default("pending") @map("sync_status")
  errorMessage String? @map("error_message")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, provider])
  @@index([tenantId, isActive])
  @@map("integrations")
}

// Campaigns
model Campaign {
  id          String        @id @default(cuid())
  tenantId    String        @map("tenant_id")
  segmentId   String?       @map("segment_id")
  name        String
  description String?
  type        CampaignType
  status      CampaignStatus @default(DRAFT)
  content     Json          @default("{}")
  settings    Json          @default("{}")
  scheduledAt DateTime?     @map("scheduled_at")
  launchedAt  DateTime?     @map("launched_at")
  completedAt DateTime?     @map("completed_at")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  // Relations
  tenant       Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  segment      Segment?              @relation(fields: [segmentId], references: [id], onDelete: SetNull)
  interactions CampaignInteraction[]

  @@index([tenantId, status])
  @@index([tenantId, type])
  @@map("campaigns")
}

model CampaignInteraction {
  id         String           @id @default(cuid())
  campaignId String           @map("campaign_id")
  customerId String           @map("customer_id")
  type       InteractionType
  properties Json             @default("{}")
  occurredAt DateTime         @default(now()) @map("occurred_at")

  // Relations
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([campaignId, type])
  @@index([customerId, occurredAt])
  @@map("campaign_interactions")
}

// ML Models
model MlModel {
  id          String    @id @default(cuid())
  name        String
  version     String
  type        ModelType
  config      Json      @default("{}")
  performance Json      @default("{}")
  isActive    Boolean   @default(false) @map("is_active")
  trainedAt   DateTime  @map("trained_at")
  deployedAt  DateTime? @map("deployed_at")
  createdAt   DateTime  @default(now()) @map("created_at")

  @@unique([name, version])
  @@index([type, isActive])
  @@map("ml_models")
}

// Audit logging
model AuditLog {
  id        String   @id @default(cuid())
  tenantId  String?  @map("tenant_id")
  userId    String?  @map("user_id")
  action    String
  resource  String
  resourceId String? @map("resource_id")
  details   Json     @default("{}")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")

  @@index([tenantId, action])
  @@index([userId, createdAt])
  @@index([resource, resourceId])
  @@map("audit_logs")
}

// Enums
enum UserRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum CampaignType {
  EMAIL
  SMS
  PUSH
  WEBHOOK
  EXPORT
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum InteractionType {
  SENT
  DELIVERED
  OPENED
  CLICKED
  CONVERTED
  BOUNCED
  UNSUBSCRIBED
}

enum ModelType {
  CLUSTERING
  CLASSIFICATION
  REGRESSION
  RECOMMENDATION
}