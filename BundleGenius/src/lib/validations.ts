import { z } from "zod"

// Bundle validation schemas
export const createBundleSchema = z.object({
  title: z.string().min(1, "Title is required").max(100, "Title too long"),
  slug: z.string().min(1, "Slug is required").regex(/^[a-z0-9-]+$/, "Invalid slug format"),
  description: z.string().optional(),
  pricingType: z.enum(["PERCENTAGE_DISCOUNT", "FIXED_DISCOUNT", "FIXED_PRICE", "BUY_X_GET_Y"]),
  discountValue: z.number().min(0).max(1).optional(),
  fixedPrice: z.number().min(0).optional(),
  items: z.array(z.object({
    productId: z.string().cuid(),
    quantity: z.number().int().min(1).max(99),
    required: z.boolean().default(true),
    position: z.number().int().min(0).default(0)
  })).min(2, "Bundle must have at least 2 products"),
  minItems: z.number().int().min(1).default(2),
  maxItems: z.number().int().min(1).optional(),
  allowCustomization: z.boolean().default(false),
  status: z.enum(["DRAFT", "ACTIVE", "INACTIVE", "SCHEDULED", "EXPIRED", "ARCHIVED"]).default("DRAFT"),
  startsAt: z.string().datetime().optional(),
  endsAt: z.string().datetime().optional(),
  metaTitle: z.string().max(60).optional(),
  metaDescription: z.string().max(160).optional()
})

export const updateBundleSchema = createBundleSchema.partial().extend({
  id: z.string().cuid()
})

export const bundleQuerySchema = z.object({
  page: z.coerce.number().int().min(1).default(1),
  limit: z.coerce.number().int().min(1).max(100).default(20),
  status: z.enum(["DRAFT", "ACTIVE", "INACTIVE", "SCHEDULED", "EXPIRED", "ARCHIVED"]).optional(),
  search: z.string().optional(),
  sortBy: z.enum(["createdAt", "updatedAt", "title", "revenue", "conversions"]).default("createdAt"),
  sortOrder: z.enum(["asc", "desc"]).default("desc"),
  isAutoGenerated: z.coerce.boolean().optional()
})

// Product validation schemas
export const createProductSchema = z.object({
  title: z.string().min(1, "Title is required").max(200),
  slug: z.string().min(1, "Slug is required").regex(/^[a-z0-9-]+$/, "Invalid slug format"),
  description: z.string().optional(),
  shortDescription: z.string().max(500).optional(),
  sku: z.string().optional(),
  price: z.number().min(0, "Price must be positive"),
  compareAtPrice: z.number().min(0).optional(),
  costPrice: z.number().min(0).optional(),
  trackQuantity: z.boolean().default(true),
  quantity: z.number().int().min(0).default(0),
  lowStockThreshold: z.number().int().min(0).optional(),
  categoryId: z.string().cuid().optional(),
  tags: z.array(z.string()).default([]),
  status: z.enum(["DRAFT", "ACTIVE", "INACTIVE", "ARCHIVED"]).default("DRAFT"),
  images: z.array(z.object({
    url: z.string().url(),
    altText: z.string().optional(),
    position: z.number().int().min(0).default(0)
  })).default([]),
  metaTitle: z.string().max(60).optional(),
  metaDescription: z.string().max(160).optional()
})

export const updateProductSchema = createProductSchema.partial().extend({
  id: z.string().cuid()
})

// Store validation schemas
export const createStoreSchema = z.object({
  name: z.string().min(1, "Store name is required").max(100),
  domain: z.string().url().optional(),
  description: z.string().max(500).optional(),
  timezone: z.string().default("UTC"),
  currency: z.string().length(3, "Invalid currency code").default("USD"),
  platform: z.enum(["SHOPIFY", "WOOCOMMERCE", "BIGCOMMERCE", "MAGENTO", "CUSTOM_API"]),
  platformStoreId: z.string().optional(),
  platformApiKey: z.string().optional(),
  platformSecret: z.string().optional()
})

export const updateStoreSchema = createStoreSchema.partial().extend({
  id: z.string().cuid()
})

// Customer validation schemas
export const createCustomerSchema = z.object({
  email: z.string().email().optional(),
  firstName: z.string().max(50).optional(),
  lastName: z.string().max(50).optional(),
  phone: z.string().max(20).optional(),
  tags: z.array(z.string()).default([]),
  segment: z.enum(["NEW", "REGULAR", "VIP", "AT_RISK", "CHURNED"]).default("NEW")
})

export const updateCustomerSchema = createCustomerSchema.partial().extend({
  id: z.string().cuid()
})

// Order validation schemas
export const createOrderSchema = z.object({
  orderNumber: z.string().min(1, "Order number is required"),
  customerId: z.string().cuid().optional(),
  customerEmail: z.string().email().optional(),
  subtotal: z.number().min(0),
  discount: z.number().min(0).default(0),
  tax: z.number().min(0).default(0),
  shipping: z.number().min(0).default(0),
  total: z.number().min(0),
  bundleId: z.string().cuid().optional(),
  bundleDiscount: z.number().min(0).optional(),
  status: z.enum(["PENDING", "CONFIRMED", "PROCESSING", "SHIPPED", "DELIVERED", "COMPLETED", "CANCELED", "REFUNDED"]).default("PENDING"),
  fulfillmentStatus: z.enum(["UNFULFILLED", "PARTIAL", "FULFILLED"]).default("UNFULFILLED"),
  paymentStatus: z.enum(["PENDING", "AUTHORIZED", "PAID", "PARTIALLY_PAID", "REFUNDED", "PARTIALLY_REFUNDED", "VOIDED"]).default("PENDING"),
  items: z.array(z.object({
    productId: z.string().cuid(),
    title: z.string(),
    sku: z.string().optional(),
    quantity: z.number().int().min(1),
    price: z.number().min(0),
    total: z.number().min(0)
  })).min(1, "Order must have at least 1 item")
})

// Analytics validation schemas
export const analyticsQuerySchema = z.object({
  startDate: z.string().datetime(),
  endDate: z.string().datetime(),
  period: z.enum(["HOUR", "DAY", "WEEK", "MONTH", "QUARTER", "YEAR"]).default("DAY"),
  metrics: z.array(z.enum([
    "TOTAL_REVENUE",
    "BUNDLE_REVENUE", 
    "BUNDLE_COUNT",
    "CONVERSION_RATE",
    "AVERAGE_ORDER_VALUE",
    "CUSTOMER_LIFETIME_VALUE",
    "BUNDLE_ADOPTION_RATE",
    "RECOMMENDATION_ACCURACY",
    "USER_ENGAGEMENT",
    "INVENTORY_TURNOVER"
  ])).default(["TOTAL_REVENUE", "BUNDLE_REVENUE"]),
  dimensions: z.array(z.string()).optional()
})

// A/B Testing validation schemas
export const createABTestSchema = z.object({
  name: z.string().min(1, "Test name is required").max(100),
  description: z.string().max(500).optional(),
  hypothesis: z.string().max(1000).optional(),
  type: z.enum(["BUNDLE_COMPOSITION", "PRICING_STRATEGY", "DISCOUNT_AMOUNT", "BUNDLE_LAYOUT", "RECOMMENDATION_ALGORITHM"]),
  trafficSplit: z.number().min(0.1).max(0.9).default(0.5),
  primaryMetric: z.enum(["CONVERSION_RATE", "AVERAGE_ORDER_VALUE", "REVENUE_PER_VISITOR", "BUNDLE_ADOPTION_RATE", "CUSTOMER_LIFETIME_VALUE"]),
  startsAt: z.string().datetime(),
  endsAt: z.string().datetime().optional(),
  variants: z.array(z.object({
    name: z.string().min(1, "Variant name is required"),
    description: z.string().optional(),
    isControl: z.boolean().default(false),
    bundleId: z.string().cuid().optional(),
    config: z.record(z.any()).optional()
  })).min(2, "Test must have at least 2 variants")
})

// Recommendation validation schemas
export const recommendationQuerySchema = z.object({
  targetProductId: z.string().cuid().optional(),
  customerSegment: z.enum(["NEW", "REGULAR", "VIP", "AT_RISK", "CHURNED"]).optional(),
  seasonality: z.coerce.boolean().default(false),
  inventoryConstraints: z.coerce.boolean().default(false),
  limit: z.coerce.number().int().min(1).max(50).default(10)
})

// Webhook validation schemas
export const createWebhookSchema = z.object({
  url: z.string().url("Invalid webhook URL"),
  events: z.array(z.enum([
    "BUNDLE_CREATED",
    "BUNDLE_UPDATED", 
    "BUNDLE_DELETED",
    "ORDER_PLACED",
    "PRODUCT_UPDATED",
    "INVENTORY_CHANGED",
    "ANALYTICS_UPDATED"
  ])).min(1, "At least one event is required"),
  secret: z.string().optional()
})

// Store settings validation schema
export const updateStoreSettingsSchema = z.object({
  enableAutoBundling: z.boolean().default(true),
  maxBundleSize: z.number().int().min(2).max(10).default(5),
  minBundleDiscount: z.number().min(0).max(1).default(0.05),
  maxBundleDiscount: z.number().min(0).max(1).default(0.30),
  mlModelVersion: z.string().default("v1.0"),
  recommendationEngine: z.enum(["association_rules", "collaborative", "content_based", "seasonal", "hybrid"]).default("hybrid"),
  minConfidenceScore: z.number().min(0).max(1).default(0.3),
  enableAnalytics: z.boolean().default(true),
  retentionDays: z.number().int().min(1).max(365).default(90)
})

export type CreateBundleInput = z.infer<typeof createBundleSchema>
export type UpdateBundleInput = z.infer<typeof updateBundleSchema>
export type BundleQuery = z.infer<typeof bundleQuerySchema>
export type CreateProductInput = z.infer<typeof createProductSchema>
export type UpdateProductInput = z.infer<typeof updateProductSchema>
export type CreateStoreInput = z.infer<typeof createStoreSchema>
export type UpdateStoreInput = z.infer<typeof updateStoreSchema>
export type CreateCustomerInput = z.infer<typeof createCustomerSchema>
export type UpdateCustomerInput = z.infer<typeof updateCustomerSchema>
export type CreateOrderInput = z.infer<typeof createOrderSchema>
export type AnalyticsQuery = z.infer<typeof analyticsQuerySchema>
export type CreateABTestInput = z.infer<typeof createABTestSchema>
export type RecommendationQuery = z.infer<typeof recommendationQuerySchema>
export type CreateWebhookInput = z.infer<typeof createWebhookSchema>
export type UpdateStoreSettingsInput = z.infer<typeof updateStoreSettingsSchema>