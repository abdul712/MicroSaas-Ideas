// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authentication and User Management
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  
  accounts      Account[]
  sessions      Session[]
  stores        Store[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  ADMIN
  USER
  STORE_OWNER
  STORE_MANAGER
}

// Store and Multi-tenancy
model Store {
  id                String          @id @default(cuid())
  name              String
  domain            String?         @unique
  description       String?
  logo              String?
  timezone          String          @default("UTC")
  currency          String          @default("USD")
  
  // E-commerce platform integration
  platform          Platform
  platformStoreId   String?
  platformApiKey    String?         @db.Text
  platformSecret    String?         @db.Text
  webhookSecret     String?
  
  // Subscription and billing
  plan              SubscriptionPlan @default(STARTER)
  subscriptionId    String?
  subscriptionStatus SubscriptionStatus @default(TRIALING)
  trialEndsAt       DateTime?
  billingCycleStart DateTime?
  billingCycleEnd   DateTime?
  
  // Owner and team
  ownerId           String
  owner             User            @relation(fields: [ownerId], references: [id])
  members           StoreMember[]
  
  // Store data
  products          Product[]
  categories        Category[]
  bundles           Bundle[]
  customers         Customer[]
  orders            Order[]
  analytics         Analytics[]
  abTests           ABTest[]
  
  // Settings and configuration
  settings          StoreSettings?
  
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  @@index([ownerId])
  @@index([platform, platformStoreId])
}

model StoreMember {
  id        String    @id @default(cuid())
  storeId   String
  userId    String
  role      StoreRole @default(MEMBER)
  
  store     Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  
  createdAt DateTime  @default(now())
  
  @@unique([storeId, userId])
}

model StoreSettings {
  id                    String  @id @default(cuid())
  storeId               String  @unique
  
  // Bundle settings
  enableAutoBundling    Boolean @default(true)
  maxBundleSize         Int     @default(5)
  minBundleDiscount     Float   @default(0.05)
  maxBundleDiscount     Float   @default(0.30)
  
  // ML settings
  mlModelVersion        String  @default("v1.0")
  recommendationEngine  String  @default("hybrid")
  minConfidenceScore    Float   @default(0.3)
  
  // Analytics settings
  enableAnalytics       Boolean @default(true)
  retentionDays         Int     @default(90)
  
  store                 Store   @relation(fields: [storeId], references: [id], onDelete: Cascade)
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

enum Platform {
  SHOPIFY
  WOOCOMMERCE
  BIGCOMMERCE
  MAGENTO
  CUSTOM_API
}

enum SubscriptionPlan {
  STARTER
  PROFESSIONAL
  ENTERPRISE
  CUSTOM
}

enum SubscriptionStatus {
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
}

enum StoreRole {
  OWNER
  ADMIN
  MANAGER
  MEMBER
  VIEWER
}

// Product Catalog
model Category {
  id          String    @id @default(cuid())
  storeId     String
  name        String
  slug        String
  description String?
  image       String?
  parentId    String?
  
  store       Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@unique([storeId, slug])
  @@index([storeId, parentId])
}

model Product {
  id                String          @id @default(cuid())
  storeId           String
  platformProductId String?
  
  // Basic product info
  title             String
  slug              String
  description       String?         @db.Text
  shortDescription  String?
  sku               String?
  
  // Pricing
  price             Float
  compareAtPrice    Float?
  costPrice         Float?
  
  // Inventory
  trackQuantity     Boolean         @default(true)
  quantity          Int             @default(0)
  lowStockThreshold Int?
  
  // Media
  images            ProductImage[]
  
  // Organization
  categoryId        String?
  tags              String[]
  
  // Status
  status            ProductStatus   @default(DRAFT)
  publishedAt       DateTime?
  
  // SEO
  metaTitle         String?
  metaDescription   String?
  
  // Relationships
  store             Store           @relation(fields: [storeId], references: [id], onDelete: Cascade)
  category          Category?       @relation(fields: [categoryId], references: [id])
  bundleItems       BundleItem[]
  orderItems        OrderItem[]
  recommendations   ProductRecommendation[]
  analytics         ProductAnalytics[]
  
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  @@unique([storeId, slug])
  @@unique([storeId, platformProductId])
  @@index([storeId, status])
  @@index([storeId, categoryId])
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  altText   String?
  position  Int     @default(0)
  
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@index([productId, position])
}

enum ProductStatus {
  DRAFT
  ACTIVE
  INACTIVE
  ARCHIVED
}

// Bundle Management
model Bundle {
  id                String        @id @default(cuid())
  storeId           String
  
  // Basic bundle info
  title             String
  slug              String
  description       String?       @db.Text
  
  // Pricing strategy
  pricingType       PricingType   @default(PERCENTAGE_DISCOUNT)
  discountValue     Float         @default(0.1)
  fixedPrice        Float?
  
  // Bundle configuration
  items             BundleItem[]
  minItems          Int           @default(2)
  maxItems          Int?
  allowCustomization Boolean      @default(false)
  
  // Status and visibility
  status            BundleStatus  @default(DRAFT)
  isAutoGenerated   Boolean       @default(false)
  priority          Int           @default(0)
  
  // Analytics and performance
  views             Int           @default(0)
  conversions       Int           @default(0)
  revenue           Float         @default(0)
  
  // ML and optimization
  confidenceScore   Float?
  algorithmUsed     String?
  lastOptimized     DateTime?
  
  // Scheduling
  startsAt          DateTime?
  endsAt            DateTime?
  
  // SEO
  metaTitle         String?
  metaDescription   String?
  
  // Relationships
  store             Store         @relation(fields: [storeId], references: [id], onDelete: Cascade)
  orders            Order[]
  abTests           ABTestVariant[]
  analytics         BundleAnalytics[]
  
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  @@unique([storeId, slug])
  @@index([storeId, status])
  @@index([storeId, isAutoGenerated])
}

model BundleItem {
  id         String  @id @default(cuid())
  bundleId   String
  productId  String
  quantity   Int     @default(1)
  required   Boolean @default(true)
  position   Int     @default(0)
  
  bundle     Bundle  @relation(fields: [bundleId], references: [id], onDelete: Cascade)
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([bundleId, productId])
  @@index([bundleId, position])
}

enum PricingType {
  PERCENTAGE_DISCOUNT
  FIXED_DISCOUNT
  FIXED_PRICE
  BUY_X_GET_Y
}

enum BundleStatus {
  DRAFT
  ACTIVE
  INACTIVE
  SCHEDULED
  EXPIRED
  ARCHIVED
}

// Customer Management
model Customer {
  id                String   @id @default(cuid())
  storeId           String
  platformCustomerId String?
  
  // Basic info
  email             String?
  firstName         String?
  lastName          String?
  phone             String?
  
  // Preferences and behavior
  tags              String[]
  totalSpent        Float    @default(0)
  totalOrders       Int      @default(0)
  lastOrderAt       DateTime?
  
  // Segmentation
  segment           CustomerSegment @default(NEW)
  lifetimeValue     Float?
  averageOrderValue Float?
  
  // Relationships
  store             Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  orders            Order[]
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@unique([storeId, email])
  @@unique([storeId, platformCustomerId])
  @@index([storeId, segment])
}

enum CustomerSegment {
  NEW
  REGULAR
  VIP
  AT_RISK
  CHURNED
}

// Order Management
model Order {
  id                String      @id @default(cuid())
  storeId           String
  platformOrderId   String?
  
  // Customer info
  customerId        String?
  customerEmail     String?
  
  // Order details
  orderNumber       String
  subtotal          Float
  discount          Float       @default(0)
  tax               Float       @default(0)
  shipping          Float       @default(0)
  total             Float
  
  // Bundle information
  bundleId          String?
  isBundleOrder     Boolean     @default(false)
  bundleDiscount    Float?
  
  // Status and fulfillment
  status            OrderStatus @default(PENDING)
  fulfillmentStatus FulfillmentStatus @default(UNFULFILLED)
  
  // Payment
  paymentStatus     PaymentStatus @default(PENDING)
  paymentMethod     String?
  
  // Items and relationships
  items             OrderItem[]
  bundle            Bundle?     @relation(fields: [bundleId], references: [id])
  customer          Customer?   @relation(fields: [customerId], references: [id])
  store             Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  
  // Timestamps
  placedAt          DateTime    @default(now())
  shippedAt         DateTime?
  deliveredAt       DateTime?
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  @@unique([storeId, orderNumber])
  @@unique([storeId, platformOrderId])
  @@index([storeId, status])
  @@index([storeId, bundleId])
}

model OrderItem {
  id         String  @id @default(cuid())
  orderId    String
  productId  String
  
  title      String
  sku        String?
  quantity   Int
  price      Float
  total      Float
  
  order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product @relation(fields: [productId], references: [id])
  
  @@index([orderId])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  COMPLETED
  CANCELED
  REFUNDED
}

enum FulfillmentStatus {
  UNFULFILLED
  PARTIAL
  FULFILLED
}

enum PaymentStatus {
  PENDING
  AUTHORIZED
  PAID
  PARTIALLY_PAID
  REFUNDED
  PARTIALLY_REFUNDED
  VOIDED
}

// ML and Recommendations
model ProductRecommendation {
  id            String                @id @default(cuid())
  productId     String
  
  // Recommendation details
  type          RecommendationType
  algorithm     String
  confidence    Float
  strength      Float
  context       String?
  
  // Related products
  relatedProductIds String[]
  
  // Performance tracking
  impressions   Int                   @default(0)
  clicks        Int                   @default(0)
  conversions   Int                   @default(0)
  
  // Metadata
  metadata      Json?
  
  product       Product               @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  
  @@index([productId, type])
  @@index([productId, confidence])
}

enum RecommendationType {
  FREQUENTLY_BOUGHT_TOGETHER
  SIMILAR_PRODUCTS
  CROSS_SELL
  UPSELL
  TRENDING
  SEASONAL
  PERSONALIZED
}

// A/B Testing
model ABTest {
  id            String          @id @default(cuid())
  storeId       String
  
  name          String
  description   String?
  hypothesis    String?
  
  // Test configuration
  type          ABTestType
  status        ABTestStatus    @default(DRAFT)
  trafficSplit  Float           @default(0.5)
  
  // Success metrics
  primaryMetric ABTestMetric
  
  // Scheduling
  startsAt      DateTime
  endsAt        DateTime?
  
  // Results
  isStatisticallySignificant Boolean @default(false)
  pValue        Float?
  confidence    Float?
  winnerVariantId String?
  
  // Relationships
  store         Store           @relation(fields: [storeId], references: [id], onDelete: Cascade)
  variants      ABTestVariant[]
  results       ABTestResult[]
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  @@index([storeId, status])
}

model ABTestVariant {
  id        String    @id @default(cuid())
  testId    String
  bundleId  String?
  
  name      String
  description String?
  isControl Boolean   @default(false)
  
  // Configuration
  config    Json?
  
  // Performance metrics
  impressions Int     @default(0)
  conversions Int     @default(0)
  revenue     Float   @default(0)
  
  test      ABTest    @relation(fields: [testId], references: [id], onDelete: Cascade)
  bundle    Bundle?   @relation(fields: [bundleId], references: [id])
  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  @@index([testId])
}

model ABTestResult {
  id        String   @id @default(cuid())
  testId    String
  variantId String
  
  metric    ABTestMetric
  value     Float
  date      DateTime
  
  test      ABTest   @relation(fields: [testId], references: [id], onDelete: Cascade)
  
  @@unique([testId, variantId, metric, date])
  @@index([testId, date])
}

enum ABTestType {
  BUNDLE_COMPOSITION
  PRICING_STRATEGY
  DISCOUNT_AMOUNT
  BUNDLE_LAYOUT
  RECOMMENDATION_ALGORITHM
}

enum ABTestStatus {
  DRAFT
  RUNNING
  PAUSED
  COMPLETED
  ARCHIVED
}

enum ABTestMetric {
  CONVERSION_RATE
  AVERAGE_ORDER_VALUE
  REVENUE_PER_VISITOR
  BUNDLE_ADOPTION_RATE
  CUSTOMER_LIFETIME_VALUE
}

// Analytics and Reporting
model Analytics {
  id        String        @id @default(cuid())
  storeId   String
  
  // Time period
  date      DateTime
  period    AnalyticsPeriod
  
  // Metrics
  metric    AnalyticsMetric
  value     Float
  
  // Dimensions
  dimensions Json?
  
  store     Store         @relation(fields: [storeId], references: [id], onDelete: Cascade)
  
  @@unique([storeId, date, period, metric])
  @@index([storeId, date, period])
  @@index([storeId, metric])
}

model BundleAnalytics {
  id        String   @id @default(cuid())
  bundleId  String
  date      DateTime
  
  // Performance metrics
  impressions     Int    @default(0)
  views           Int    @default(0)
  addToCartEvents Int    @default(0)
  purchases       Int    @default(0)
  revenue         Float  @default(0)
  
  // Conversion metrics
  viewToCart      Float? 
  cartToPurchase  Float?
  
  bundle    Bundle @relation(fields: [bundleId], references: [id], onDelete: Cascade)
  
  @@unique([bundleId, date])
  @@index([bundleId, date])
}

model ProductAnalytics {
  id        String   @id @default(cuid())
  productId String
  date      DateTime
  
  // Performance metrics
  views           Int    @default(0)
  addToCartEvents Int    @default(0)
  purchases       Int    @default(0)
  revenue         Float  @default(0)
  bundleRevenue   Float  @default(0)
  
  // Bundle participation
  bundleImpressions Int    @default(0)
  bundlePurchases   Int    @default(0)
  
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([productId, date])
  @@index([productId, date])
}

enum AnalyticsPeriod {
  HOUR
  DAY
  WEEK
  MONTH
  QUARTER
  YEAR
}

enum AnalyticsMetric {
  TOTAL_REVENUE
  BUNDLE_REVENUE
  BUNDLE_COUNT
  CONVERSION_RATE
  AVERAGE_ORDER_VALUE
  CUSTOMER_LIFETIME_VALUE
  BUNDLE_ADOPTION_RATE
  RECOMMENDATION_ACCURACY
  USER_ENGAGEMENT
  INVENTORY_TURNOVER
}

// Webhooks and Integrations
model Webhook {
  id        String        @id @default(cuid())
  storeId   String
  
  url       String
  events    WebhookEvent[]
  secret    String?
  isActive  Boolean       @default(true)
  
  // Delivery tracking
  lastDeliveryAt     DateTime?
  lastDeliveryStatus WebhookStatus?
  failureCount       Int         @default(0)
  
  store     Store         @relation(fields: [storeId], references: [id], onDelete: Cascade)
  deliveries WebhookDelivery[]
  
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  
  @@index([storeId, isActive])
}

model WebhookDelivery {
  id        String        @id @default(cuid())
  webhookId String
  
  event     WebhookEvent
  payload   Json
  response  Json?
  status    WebhookStatus
  
  webhook   Webhook       @relation(fields: [webhookId], references: [id], onDelete: Cascade)
  
  createdAt DateTime      @default(now())
  
  @@index([webhookId, createdAt])
}

enum WebhookEvent {
  BUNDLE_CREATED
  BUNDLE_UPDATED
  BUNDLE_DELETED
  ORDER_PLACED
  PRODUCT_UPDATED
  INVENTORY_CHANGED
  ANALYTICS_UPDATED
}

enum WebhookStatus {
  PENDING
  DELIVERED
  FAILED
  RETRYING
}

// System and Configuration
model SystemConfig {
  id    String @id @default(cuid())
  key   String @unique
  value String @db.Text
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AuditLog {
  id        String   @id @default(cuid())
  storeId   String?
  userId    String?
  
  action    String
  resource  String
  resourceId String?
  details   Json?
  
  ipAddress String?
  userAgent String?
  
  createdAt DateTime @default(now())
  
  @@index([storeId, createdAt])
  @@index([userId, createdAt])
  @@index([action, createdAt])
}