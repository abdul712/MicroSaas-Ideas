// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [vector]
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum SubscriptionPlan {
  FREE
  CREATOR
  PROFESSIONAL
  AGENCY
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  INCOMPLETE
  TRIALING
}

enum Platform {
  INSTAGRAM_FEED
  INSTAGRAM_STORIES
  INSTAGRAM_REELS
  FACEBOOK_POST
  TWITTER_POST
  LINKEDIN_POST
  TIKTOK_POST
  YOUTUBE_SHORT
  PINTEREST_PIN
}

enum BrandVoiceType {
  PROFESSIONAL
  CASUAL
  FRIENDLY
  AUTHORITATIVE
  HUMOROUS
  INSPIRATIONAL
  TECHNICAL
  CONVERSATIONAL
}

enum AIProvider {
  OPENAI
  ANTHROPIC
  GOOGLE
}

enum GenerationStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum ActivityType {
  CAPTION_GENERATED
  BRAND_VOICE_CREATED
  BRAND_VOICE_UPDATED
  IMAGE_UPLOADED
  CAPTION_SAVED
  CAPTION_SHARED
  SUBSCRIPTION_UPGRADED
  SUBSCRIPTION_DOWNGRADED
  TEAM_MEMBER_INVITED
  TEAM_MEMBER_REMOVED
  ANALYTICS_VIEWED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Authentication
  accounts Account[]
  sessions Session[]

  // Profile
  firstName     String?
  lastName      String?
  bio           String?
  website       String?
  location      String?
  timezone      String?
  
  // Preferences
  preferences   Json?
  onboardingCompleted Boolean @default(false)
  
  // Subscription
  subscription  Subscription?
  
  // Organizations
  organizationMemberships OrganizationMember[]
  ownedOrganizations      Organization[]
  
  // Content
  brandVoices   BrandVoice[]
  captions      Caption[]
  images        Image[]
  activities    Activity[]
  
  // Analytics
  analytics     UserAnalytics?
  
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  website     String?
  logo        String?
  settings    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Owner
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id])

  // Members
  members     OrganizationMember[]
  
  // Subscription
  subscription OrganizationSubscription?
  
  // Content
  brandVoices BrandVoice[]
  captions    Caption[]
  projects    Project[]
  
  // Analytics
  analytics   OrganizationAnalytics?
  
  @@map("organizations")
}

model OrganizationMember {
  id             String   @id @default(cuid())
  organizationId String
  userId         String
  role           String   @default("member") // owner, admin, member, viewer
  permissions    Json?
  invitedAt      DateTime @default(now())
  joinedAt       DateTime?
  
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([organizationId, userId])
  @@map("organization_members")
}

model Subscription {
  id                String             @id @default(cuid())
  userId            String             @unique
  stripeCustomerId  String?            @unique
  stripeSubscriptionId String?         @unique
  plan              SubscriptionPlan   @default(FREE)
  status            SubscriptionStatus @default(ACTIVE)
  credits           Int                @default(20)
  maxCredits        Int                @default(20)
  creditsResetDate  DateTime?
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd Boolean            @default(false)
  trialEnd          DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices          Invoice[]
  usageRecords      UsageRecord[]

  @@map("subscriptions")
}

model OrganizationSubscription {
  id                String             @id @default(cuid())
  organizationId    String             @unique
  stripeCustomerId  String?            @unique
  stripeSubscriptionId String?         @unique
  plan              SubscriptionPlan   @default(CREATOR)
  status            SubscriptionStatus @default(ACTIVE)
  credits           Int                @default(200)
  maxCredits        Int                @default(200)
  creditsResetDate  DateTime?
  seats             Int                @default(1)
  maxSeats          Int                @default(1)
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd Boolean            @default(false)
  trialEnd          DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  organization      Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invoices          OrganizationInvoice[]
  usageRecords      OrganizationUsageRecord[]

  @@map("organization_subscriptions")
}

model Invoice {
  id               String   @id @default(cuid())
  subscriptionId   String
  stripeInvoiceId  String   @unique
  amount           Int      // Amount in cents
  currency         String   @default("usd")
  status           String
  hostedInvoiceUrl String?
  invoicePdf       String?
  createdAt        DateTime @default(now())

  subscription     Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

model OrganizationInvoice {
  id               String   @id @default(cuid())
  subscriptionId   String
  stripeInvoiceId  String   @unique
  amount           Int      // Amount in cents
  currency         String   @default("usd")
  status           String
  hostedInvoiceUrl String?
  invoicePdf       String?
  createdAt        DateTime @default(now())

  subscription     OrganizationSubscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@map("organization_invoices")
}

model UsageRecord {
  id             String   @id @default(cuid())
  subscriptionId String
  creditsUsed    Int
  action         String   // e.g., "caption_generation", "image_analysis"
  metadata       Json?
  createdAt      DateTime @default(now())

  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@map("usage_records")
}

model OrganizationUsageRecord {
  id             String   @id @default(cuid())
  subscriptionId String
  creditsUsed    Int
  action         String
  metadata       Json?
  createdAt      DateTime @default(now())

  subscription   OrganizationSubscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@map("organization_usage_records")
}

model Project {
  id             String   @id @default(cuid())
  name           String
  description    String?
  organizationId String?
  userId         String?
  settings       Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  captions       Caption[]

  @@map("projects")
}

model BrandVoice {
  id             String          @id @default(cuid())
  name           String
  description    String?
  type           BrandVoiceType
  userId         String?
  organizationId String?
  
  // Training data
  examples       String[]        // Sample captions in this voice
  keywords       String[]        // Important keywords/phrases
  toneGuidelines String?         // Detailed guidelines
  
  // AI embeddings for semantic matching
  embeddings     Unsupported("vector(1536)")? // OpenAI embedding dimension
  
  // Settings
  settings       Json?           // Custom parameters
  isDefault      Boolean         @default(false)
  isActive       Boolean         @default(true)
  
  // Metadata
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  lastUsedAt     DateTime?

  // Relations
  user           User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization?   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  captions       Caption[]

  @@map("brand_voices")
}

model Image {
  id          String   @id @default(cuid())
  userId      String
  filename    String
  originalUrl String
  optimizedUrl String?
  thumbnailUrl String?
  size        Int      // File size in bytes
  width       Int?
  height      Int?
  format      String   // jpeg, png, etc.
  
  // Analysis results
  analysisData Json?    // Google Vision API results
  tags         String[] // Extracted tags
  objects      String[] // Detected objects
  colors       String[] // Dominant colors
  text         String?  // Extracted text
  faces        Int?     // Number of faces detected
  
  // Metadata
  metadata     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  captions     Caption[]

  @@map("images")
}

model Caption {
  id             String            @id @default(cuid())
  userId         String
  organizationId String?
  projectId      String?
  imageId        String?
  brandVoiceId   String?
  
  // Content
  originalPrompt String
  platform       Platform
  content         String
  hashtags        String[]
  emojis          String[]
  
  // Generation details
  aiProvider      AIProvider
  modelUsed       String           // gpt-4, claude-3, etc.
  generationStatus GenerationStatus @default(PENDING)
  generationTime  Int?             // Milliseconds
  cost           Float?           // Cost in USD
  
  // Quality metrics
  qualityScore   Float?           // 0-1 score
  engagementPrediction Float?     // Predicted engagement rate
  brandVoiceMatch Float?          // How well it matches brand voice
  
  // Usage
  isFavorite     Boolean          @default(false)
  isUsed         Boolean          @default(false)
  usedAt         DateTime?
  shareCount     Int              @default(0)
  
  // Performance tracking
  actualEngagement Json?          // Real performance data if available
  
  // Metadata
  metadata       Json?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // Relations
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization?    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  project        Project?         @relation(fields: [projectId], references: [id], onDelete: SetNull)
  image          Image?           @relation(fields: [imageId], references: [id], onDelete: SetNull)
  brandVoice     BrandVoice?      @relation(fields: [brandVoiceId], references: [id], onDelete: SetNull)
  feedback       CaptionFeedback[]
  
  @@map("captions")
}

model CaptionFeedback {
  id        String   @id @default(cuid())
  captionId String
  userId    String
  rating    Int      // 1-5 stars
  comment   String?
  helpful   Boolean?
  createdAt DateTime @default(now())

  caption   Caption  @relation(fields: [captionId], references: [id], onDelete: Cascade)

  @@unique([captionId, userId])
  @@map("caption_feedback")
}

model Activity {
  id             String       @id @default(cuid())
  userId         String
  organizationId String?
  type           ActivityType
  description    String
  metadata       Json?
  ipAddress      String?
  userAgent      String?
  createdAt      DateTime     @default(now())

  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activities")
}

model UserAnalytics {
  id                    String   @id @default(cuid())
  userId                String   @unique
  
  // Generation stats
  totalCaptionsGenerated Int     @default(0)
  totalCreditsUsed       Int     @default(0)
  averageGenerationTime  Float?
  
  // Platform usage
  platformUsage          Json?   // Usage per platform
  
  // Engagement predictions vs actual
  predictionAccuracy     Float?
  
  // Usage patterns
  peakUsageHours         Int[]   // Hours of day when most active
  mostUsedBrandVoice     String?
  favoriteFeatures       String[]
  
  // Time tracking
  lastActiveAt           DateTime?
  totalTimeSpent         Int?    // Minutes
  
  updatedAt              DateTime @updatedAt

  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_analytics")
}

model OrganizationAnalytics {
  id                     String   @id @default(cuid())
  organizationId         String   @unique
  
  // Team stats
  totalMembers           Int      @default(0)
  activeMembers          Int      @default(0)
  totalCaptionsGenerated Int      @default(0)
  totalCreditsUsed       Int      @default(0)
  
  // Performance
  averageEngagementRate  Float?
  topPerformingPlatforms String[]
  
  // Cost analytics
  monthlyCost            Float?
  costPerCaption         Float?
  
  // Growth metrics
  monthlyGrowthRate      Float?
  retentionRate          Float?
  
  updatedAt              DateTime @updatedAt

  organization           Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("organization_analytics")
}

model APIKey {
  id           String   @id @default(cuid())
  userId       String
  organizationId String?
  name         String
  keyHash      String   @unique
  permissions  Json     // API permissions
  lastUsedAt   DateTime?
  expiresAt    DateTime?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  
  @@map("api_keys")
}

model Webhook {
  id           String   @id @default(cuid())
  userId       String
  organizationId String?
  url          String
  events       String[] // Array of event types to listen for
  secret       String?  // Webhook secret for verification
  isActive     Boolean  @default(true)
  lastTriggeredAt DateTime?
  createdAt    DateTime @default(now())
  
  @@map("webhooks")
}

model FeatureFlag {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isEnabled   Boolean  @default(false)
  rolloutPercentage Float @default(0) // 0-100
  conditions  Json?    // User/org conditions
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("feature_flags")
}

// Indexes for performance
@@index([User.email])
@@index([User.createdAt])
@@index([Caption.userId])
@@index([Caption.createdAt])
@@index([Caption.platform])
@@index([Caption.aiProvider])
@@index([Image.userId])
@@index([Activity.userId])
@@index([Activity.createdAt])
@@index([BrandVoice.userId])
@@index([BrandVoice.organizationId])