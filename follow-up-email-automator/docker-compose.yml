version: '3.8'

services:
  # Application
  app:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://user:password@postgres:5432/follow_up_email_automator
      - REDIS_URL=redis://redis:6379
      - NEXTAUTH_SECRET=your-secret-key-here
      - NEXTAUTH_URL=http://localhost:3000
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    volumes:
      - ./uploads:/app/uploads
    networks:
      - email-automation

  # Development version (for local development)
  app-dev:
    build:
      context: .
      target: builder
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://user:password@postgres:5432/follow_up_email_automator
      - REDIS_URL=redis://redis:6379
      - NEXTAUTH_SECRET=your-secret-key-here
      - NEXTAUTH_URL=http://localhost:3001
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    command: npm run dev
    networks:
      - email-automation
    profiles:
      - dev

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=follow_up_email_automator
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d follow_up_email_automator"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - email-automation

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    restart: unless-stopped
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - email-automation

  # Queue Dashboard (Bull Board)
  queue-dashboard:
    build: .
    ports:
      - "3002:3000"
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
    restart: unless-stopped
    command: node queue-dashboard.js
    networks:
      - email-automation
    profiles:
      - monitoring

  # Database Migration Service
  migrate:
    build: .
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/follow_up_email_automator
    depends_on:
      - postgres
    command: npx prisma migrate deploy
    networks:
      - email-automation
    profiles:
      - migration

  # Database Seeding Service
  seed:
    build: .
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/follow_up_email_automator
    depends_on:
      - postgres
    command: npm run db:seed
    networks:
      - email-automation
    profiles:
      - seed

  # Nginx Reverse Proxy (for production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/ssl/certs
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - email-automation
    profiles:
      - production

  # Email Testing Service (MailHog for development)
  mailhog:
    image: mailhog/mailhog
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    restart: unless-stopped
    networks:
      - email-automation
    profiles:
      - dev

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - email-automation
    profiles:
      - monitoring

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - email-automation
    profiles:
      - monitoring

networks:
  email-automation:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data: