version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: competitor-postgres
    environment:
      POSTGRES_DB: competitor_analysis
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - competitor_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: competitor-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - competitor_network

  # ClickHouse for Time-Series Analytics
  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: competitor-clickhouse
    ports:
      - "8123:8123"
      - "9000:9000"
    environment:
      CLICKHOUSE_DB: analytics
      CLICKHOUSE_USER: default
      CLICKHOUSE_PASSWORD: ""
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./database/clickhouse-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - competitor_network

  # Apache Kafka for Event Streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: competitor-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - competitor_network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: competitor-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - competitor_network

  # Elasticsearch for Search and Analytics
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: competitor-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - competitor_network

  # Frontend (Next.js 14)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: competitor-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:4000
      - NEXT_PUBLIC_WS_URL=ws://localhost:4000
      - NEXT_PUBLIC_SCRAPER_URL=http://localhost:8001
    depends_on:
      - backend
    networks:
      - competitor_network
    volumes:
      - ./frontend:/app
      - /app/node_modules

  # Backend (Node.js/Express with Socket.IO)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: competitor-backend
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/competitor_analysis
      - REDIS_URL=redis://redis:6379
      - CLICKHOUSE_URL=http://clickhouse:8123
      - KAFKA_BROKER=kafka:9092
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SCRAPER_SERVICE_URL=http://scraper:8001
    depends_on:
      - postgres
      - redis
      - clickhouse
      - kafka
      - elasticsearch
    networks:
      - competitor_network
    volumes:
      - ./backend:/app
      - /app/node_modules

  # Python Scraper Service (FastAPI)
  scraper:
    build:
      context: ./scraper
      dockerfile: Dockerfile
    container_name: competitor-scraper
    ports:
      - "8001:8001"
    environment:
      - POSTGRES_URL=postgresql://postgres:postgres@postgres:5432/competitor_analysis
      - REDIS_URL=redis://redis:6379
      - KAFKA_BROKER=kafka:9092
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - competitor_network
    volumes:
      - ./scraper:/app
      - /app/__pycache__

  # Reverse Proxy (Traefik)
  traefik:
    image: traefik:v3.0
    container_name: competitor-traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - competitor_network

volumes:
  postgres_data:
  redis_data:
  clickhouse_data:
  elasticsearch_data:

networks:
  competitor_network:
    driver: bridge