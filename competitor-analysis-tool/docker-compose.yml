version: '3.8'

services:
  # Frontend - Next.js Application
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - competitor-network

  # Backend API - Node.js + Express + Socket.IO
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/competitor_analysis
      - REDIS_URL=redis://redis:6379
      - CLICKHOUSE_URL=http://clickhouse:8123
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - OPENAI_API_KEY=your-openai-api-key
      - SCRAPER_SERVICE_URL=http://scraper:8001
    depends_on:
      - postgres
      - redis
      - clickhouse
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - competitor-network

  # Scraper Service - Python FastAPI
  scraper:
    build:
      context: ./scraper
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/competitor_analysis
      - REDIS_URL=redis://redis:6379
      - CLICKHOUSE_URL=http://clickhouse:8123
      - USER_AGENT=Mozilla/5.0 (compatible; CompetitorBot/1.0; +https://competitor-analysis.com/bot)
    depends_on:
      - postgres
      - redis
      - clickhouse
    volumes:
      - ./scraper:/app
    networks:
      - competitor-network

  # PostgreSQL Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: competitor_analysis
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - competitor-network

  # Redis for Caching and Queue Management
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - competitor-network

  # ClickHouse for Time-Series Analytics
  clickhouse:
    image: clickhouse/clickhouse-server:latest
    ports:
      - "8123:8123"
      - "9000:9000"
    environment:
      CLICKHOUSE_DB: analytics
      CLICKHOUSE_USER: default
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./database/clickhouse:/docker-entrypoint-initdb.d
    networks:
      - competitor-network

  # Kafka for Event Streaming (Optional - for high-scale deployments)
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - competitor-network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - competitor-network

volumes:
  postgres_data:
  redis_data:
  clickhouse_data:

networks:
  competitor-network:
    driver: bridge