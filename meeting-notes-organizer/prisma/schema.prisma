// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  meetings         Meeting[]
  notes           Note[]
  actionItems     ActionItem[]
  workspaces      WorkspaceMember[]
  comments        Comment[]
  recordings      Recording[]

  @@map("users")
}

model Workspace {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  members  WorkspaceMember[]
  meetings Meeting[]

  @@map("workspaces")
}

model WorkspaceMember {
  id          String    @id @default(cuid())
  userId      String
  workspaceId String
  role        String    @default("member") // admin, member, viewer
  joinedAt    DateTime  @default(now())

  // Relationships
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@map("workspace_members")
}

model Meeting {
  id          String    @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime?
  status      String    @default("scheduled") // scheduled, in_progress, completed, cancelled
  location    String?
  meetingUrl  String?
  workspaceId String
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // AI-generated fields
  summary     String?
  keyTopics   String[]
  decisions   String[]
  nextSteps   String[]

  // Relationships
  workspace   Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  organizer   User         @relation(fields: [userId], references: [id])
  attendees   Attendee[]
  notes       Note[]
  actionItems ActionItem[]
  recordings  Recording[]
  comments    Comment[]

  @@map("meetings")
}

model Attendee {
  id        String   @id @default(cuid())
  meetingId String
  email     String
  name      String?
  status    String   @default("invited") // invited, accepted, declined, tentative
  role      String?  // presenter, participant, observer
  createdAt DateTime @default(now())

  // Relationships
  meeting Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)

  @@unique([meetingId, email])
  @@map("attendees")
}

model Recording {
  id           String   @id @default(cuid())
  meetingId    String
  userId       String
  fileName     String
  fileUrl      String
  fileSize     Int?
  duration     Int?     // in seconds
  transcription String?
  status       String   @default("processing") // processing, completed, failed
  createdAt    DateTime @default(now())

  // AI processing fields
  speakerMap   Json?    // speaker identification mapping
  confidence   Float?   // transcription confidence score
  language     String   @default("en")

  // Relationships
  meeting Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  @@map("recordings")
}

model Note {
  id        String   @id @default(cuid())
  meetingId String
  userId    String
  title     String?
  content   String
  type      String   @default("general") // general, agenda, minutes, follow_up
  position  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Collaboration fields
  isShared    Boolean @default(true)
  version     Int     @default(1)
  lastEditBy  String?

  // Relationships
  meeting     Meeting     @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  author      User        @relation(fields: [userId], references: [id])
  actionItems ActionItem[]
  comments    Comment[]

  @@map("notes")
}

model ActionItem {
  id          String    @id @default(cuid())
  meetingId   String
  noteId      String?
  assigneeId  String
  createdById String
  title       String
  description String?
  dueDate     DateTime?
  priority    String    @default("medium") // low, medium, high, critical
  status      String    @default("pending") // pending, in_progress, completed, cancelled
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Integration fields
  externalId String? // for project management tool sync
  externalUrl String?

  // Relationships
  meeting   Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  note      Note?   @relation(fields: [noteId], references: [id])
  assignee  User    @relation(fields: [assigneeId], references: [id])
  createdBy User    @relation(fields: [createdById], references: [id])

  @@map("action_items")
}

model Comment {
  id        String   @id @default(cuid())
  meetingId String?
  noteId    String?
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Threading
  parentId String?
  parent   Comment?  @relation("CommentThread", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentThread")

  // Relationships
  meeting Meeting? @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  note    Note?    @relation(fields: [noteId], references: [id], onDelete: Cascade)
  author  User     @relation(fields: [userId], references: [id])

  @@map("comments")
}

model Template {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String   // meeting_agenda, meeting_minutes, action_items
  content     String   // JSON structure for template
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("templates")
}

model Integration {
  id           String   @id @default(cuid())
  userId       String?
  workspaceId  String?
  provider     String   // google_calendar, outlook, zoom, teams, slack
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  settings     Json?    // provider-specific settings
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("integrations")
}

model Analytics {
  id           String   @id @default(cuid())
  workspaceId  String
  meetingId    String?
  userId       String?
  metricType   String   // meeting_duration, action_completion_rate, participation_score
  metricValue  Float
  dimensions   Json?    // additional metric dimensions
  recordedAt   DateTime @default(now())

  @@map("analytics")
}