// RestockRadar - Enterprise AI-Powered Inventory Management Database Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management and Authentication
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  
  // Multi-tenancy
  tenantId      String?
  tenant        Tenant?   @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  
  // Permissions and settings
  permissions   Json      @default("{}")
  preferences   Json      @default("{}")
  lastLoginAt   DateTime?
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  activities    UserActivity[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

// Multi-Tenant Architecture
model Tenant {
  id          String      @id @default(cuid())
  name        String
  slug        String      @unique
  domain      String?     @unique
  plan        PlanType    @default(FREE)
  status      TenantStatus @default(ACTIVE)
  
  // Settings and configuration
  settings    Json        @default("{}")
  features    Json        @default("{}")
  limits      Json        @default("{}")
  
  // Billing information
  stripeId    String?     @unique
  billingEmail String?
  
  // Relations
  users       User[]
  stores      Store[]
  products    Product[]
  suppliers   Supplier[]
  warehouses  Warehouse[]
  forecasts   DemandForecast[]
  activities  UserActivity[]
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@map("tenants")
}

// Store and Platform Integration
model Store {
  id            String       @id @default(cuid())
  tenantId      String
  tenant        Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  name          String
  platform      Platform
  platformId    String       // External platform store ID
  domain        String?
  timezone      String       @default("UTC")
  currency      String       @default("USD")
  
  // API Configuration
  apiCredentials Json        // Encrypted API keys and tokens
  webhookUrl    String?
  webhookSecret String?
  
  // Sync settings
  syncEnabled   Boolean      @default(true)
  lastSyncAt    DateTime?
  syncStatus    SyncStatus   @default(PENDING)
  syncErrors    Json         @default("[]")
  
  // Settings
  settings      Json         @default("{}")
  
  // Relations
  products      Product[]
  inventoryLogs InventoryLog[]
  orders        Order[]
  integrations  Integration[]
  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  @@unique([tenantId, platformId])
  @@map("stores")
}

// Product Management
model Product {
  id            String         @id @default(cuid())
  tenantId      String
  tenant        Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  storeId       String
  store         Store          @relation(fields: [storeId], references: [id], onDelete: Cascade)
  
  // Product identification
  externalId    String         // Platform-specific product ID
  sku           String
  title         String
  description   String?
  
  // Product details
  category      String?
  brand         String?
  weight        Float?
  dimensions    Json?          // {length, width, height}
  images        Json           @default("[]")
  
  // Pricing
  costPrice     Decimal?       @db.Decimal(10,2)
  sellingPrice  Decimal?       @db.Decimal(10,2)
  
  // Inventory tracking
  trackQuantity Boolean        @default(true)
  inventoryManagement String   @default("shopify") // shopify, manual, etc.
  
  // Classification for AI
  abcClass      ABCClass?      // A, B, C classification
  velocity      Float?         // Sales velocity
  seasonality   Json?          // Seasonal patterns
  
  // Relations
  variants      ProductVariant[]
  inventory     InventoryItem[]
  forecasts     DemandForecast[]
  reorderRules  ReorderRule[]
  supplierProducts SupplierProduct[]
  orderItems    OrderItem[]
  inventoryLogs InventoryLog[]
  
  // Metadata
  metadata      Json           @default("{}")
  lastSyncAt    DateTime?
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  @@unique([storeId, externalId])
  @@unique([storeId, sku])
  @@map("products")
}

model ProductVariant {
  id            String         @id @default(cuid())
  productId     String
  product       Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Variant identification
  externalId    String         // Platform-specific variant ID
  sku           String?
  title         String
  
  // Variant options
  option1       String?        // Size, Color, etc.
  option2       String?
  option3       String?
  
  // Pricing
  price         Decimal        @db.Decimal(10,2)
  compareAtPrice Decimal?      @db.Decimal(10,2)
  costPrice     Decimal?       @db.Decimal(10,2)
  
  // Inventory
  inventoryItem InventoryItem?
  
  // Metadata
  weight        Float?
  barcode       String?
  image         String?
  position      Int?
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  @@unique([productId, externalId])
  @@map("product_variants")
}

// Inventory Management
model InventoryItem {
  id              String           @id @default(cuid())
  productId       String?
  product         Product?         @relation(fields: [productId], references: [id], onDelete: SetNull)
  variantId       String?          @unique
  variant         ProductVariant?  @relation(fields: [variantId], references: [id], onDelete: SetNull)
  warehouseId     String
  warehouse       Warehouse        @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  
  // Current inventory
  quantityOnHand  Int              @default(0)
  quantityReserved Int             @default(0)
  quantityAvailable Int            @default(0)
  quantityIncoming Int             @default(0)
  
  // Reorder settings
  reorderPoint    Int?
  reorderQuantity Int?
  maxStock        Int?
  minStock        Int?
  
  // Location tracking
  location        String?          // Bin, shelf, etc.
  
  // Tracking
  tracked         Boolean          @default(true)
  
  // Relations
  adjustments     InventoryAdjustment[]
  logs            InventoryLog[]
  
  // Metadata
  lastCountedAt   DateTime?
  lastReceivedAt  DateTime?
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@unique([productId, warehouseId])
  @@unique([variantId, warehouseId])
  @@map("inventory_items")
}

model Warehouse {
  id            String          @id @default(cuid())
  tenantId      String
  tenant        Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  name          String
  code          String          // Short code for warehouse
  
  // Address
  address       Json            // Full address object
  timezone      String          @default("UTC")
  
  // Settings
  active        Boolean         @default(true)
  isPrimary     Boolean         @default(false)
  
  // Relations
  inventoryItems InventoryItem[]
  orders        Order[]
  adjustments   InventoryAdjustment[]
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  @@unique([tenantId, code])
  @@map("warehouses")
}

// Inventory Tracking and Logging
model InventoryLog {
  id            String         @id @default(cuid())
  tenantId      String
  tenant        Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  productId     String?
  product       Product?       @relation(fields: [productId], references: [id], onDelete: SetNull)
  storeId       String?
  store         Store?         @relation(fields: [storeId], references: [id], onDelete: SetNull)
  inventoryItemId String?
  inventoryItem InventoryItem? @relation(fields: [inventoryItemId], references: [id], onDelete: SetNull)
  
  // Change details
  changeType    InventoryChangeType
  quantityBefore Int
  quantityAfter Int
  quantityChange Int
  
  // Context
  reason        String?
  reference     String?        // Order ID, adjustment ID, etc.
  source        InventorySource @default(MANUAL)
  
  // Metadata
  metadata      Json           @default("{}")
  
  createdAt     DateTime       @default(now())
  
  @@map("inventory_logs")
}

model InventoryAdjustment {
  id            String          @id @default(cuid())
  warehouseId   String
  warehouse     Warehouse       @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  inventoryItemId String
  inventoryItem InventoryItem   @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)
  
  // Adjustment details
  reason        String
  quantityChange Int
  note          String?
  
  // Reference
  referenceNumber String?
  
  createdAt     DateTime        @default(now())
  
  @@map("inventory_adjustments")
}

// Supplier Management
model Supplier {
  id            String           @id @default(cuid())
  tenantId      String
  tenant        Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  name          String
  code          String?          // Internal supplier code
  contactName   String?
  email         String?
  phone         String?
  
  // Address
  address       Json?            // Full address object
  
  // Business details
  taxId         String?
  terms         String?          // Payment terms
  currency      String           @default("USD")
  
  // Performance metrics
  rating        Float?           @db.Real
  onTimeDelivery Float?          @db.Real
  qualityScore  Float?           @db.Real
  
  // Settings
  active        Boolean          @default(true)
  preferredSupplier Boolean      @default(false)
  
  // Relations
  products      SupplierProduct[]
  purchaseOrders PurchaseOrder[]
  
  // Metadata
  notes         String?
  metadata      Json             @default("{}")
  
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  @@unique([tenantId, code])
  @@map("suppliers")
}

model SupplierProduct {
  id            String         @id @default(cuid())
  supplierId    String
  supplier      Supplier       @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  productId     String
  product       Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Supplier-specific details
  supplierSku   String?
  supplierName  String?
  costPrice     Decimal        @db.Decimal(10,2)
  moq           Int?           // Minimum order quantity
  leadTimeDays  Int?
  
  // Terms
  preferredSupplier Boolean    @default(false)
  active        Boolean        @default(true)
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  @@unique([supplierId, productId])
  @@map("supplier_products")
}

// Purchase Orders and Reordering
model PurchaseOrder {
  id            String           @id @default(cuid())
  supplierId    String
  supplier      Supplier         @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  
  // Order details
  orderNumber   String           @unique
  status        PurchaseOrderStatus @default(DRAFT)
  
  // Dates
  orderDate     DateTime         @default(now())
  expectedDate  DateTime?
  receivedDate  DateTime?
  
  // Financial
  subtotal      Decimal          @db.Decimal(10,2)
  tax           Decimal?         @db.Decimal(10,2)
  shipping      Decimal?         @db.Decimal(10,2)
  total         Decimal          @db.Decimal(10,2)
  
  // Relations
  items         PurchaseOrderItem[]
  
  // Metadata
  notes         String?
  metadata      Json             @default("{}")
  
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id              String         @id @default(cuid())
  purchaseOrderId String
  purchaseOrder   PurchaseOrder  @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  productId       String
  product         Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Item details
  quantity        Int
  unitCost        Decimal        @db.Decimal(10,2)
  totalCost       Decimal        @db.Decimal(10,2)
  
  // Receiving
  quantityReceived Int           @default(0)
  
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  @@map("purchase_order_items")
}

model ReorderRule {
  id            String         @id @default(cuid())
  productId     String
  product       Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Rule configuration
  enabled       Boolean        @default(true)
  reorderPoint  Int
  reorderQuantity Int
  maxStock      Int?
  
  // Automation
  autoReorder   Boolean        @default(false)
  supplierId    String?        // Preferred supplier for auto-reorder
  
  // Conditions
  conditions    Json           @default("{}")
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  @@unique([productId])
  @@map("reorder_rules")
}

// AI/ML Demand Forecasting
model DemandForecast {
  id            String         @id @default(cuid())
  tenantId      String
  tenant        Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  productId     String
  product       Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Forecast period
  forecastDate  DateTime
  periodType    ForecastPeriod @default(DAILY)
  
  // Predictions
  predictedDemand Float        @db.Real
  confidence    Float?         @db.Real
  lowerBound    Float?         @db.Real
  upperBound    Float?         @db.Real
  
  // Model information
  modelVersion  String
  algorithm     String         // prophet, arima, lstm, etc.
  
  // Input features
  features      Json           @default("{}")
  
  // Accuracy tracking
  actualDemand  Float?         @db.Real
  accuracy      Float?         @db.Real
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  @@unique([productId, forecastDate, periodType])
  @@map("demand_forecasts")
}

// Order Management
model Order {
  id            String         @id @default(cuid())
  storeId       String?
  store         Store?         @relation(fields: [storeId], references: [id], onDelete: SetNull)
  warehouseId   String?
  warehouse     Warehouse?     @relation(fields: [warehouseId], references: [id], onDelete: SetNull)
  
  // Order identification
  externalId    String?        // Platform order ID
  orderNumber   String
  
  // Order details
  status        OrderStatus    @default(PENDING)
  financialStatus OrderFinancialStatus @default(PENDING)
  fulfillmentStatus OrderFulfillmentStatus @default(UNFULFILLED)
  
  // Customer
  customerEmail String?
  customerName  String?
  
  // Financial
  subtotal      Decimal        @db.Decimal(10,2)
  tax           Decimal?       @db.Decimal(10,2)
  shipping      Decimal?       @db.Decimal(10,2)
  total         Decimal        @db.Decimal(10,2)
  
  // Dates
  orderDate     DateTime       @default(now())
  processedAt   DateTime?
  fulfilledAt   DateTime?
  
  // Relations
  items         OrderItem[]
  
  // Metadata
  metadata      Json           @default("{}")
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  @@map("orders")
}

model OrderItem {
  id            String         @id @default(cuid())
  orderId       String
  order         Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId     String
  product       Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Item details
  quantity      Int
  price         Decimal        @db.Decimal(10,2)
  total         Decimal        @db.Decimal(10,2)
  
  // SKU and variant info
  sku           String?
  variantTitle  String?
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  @@map("order_items")
}

// Platform Integrations
model Integration {
  id            String            @id @default(cuid())
  storeId       String
  store         Store             @relation(fields: [storeId], references: [id], onDelete: Cascade)
  
  // Integration details
  platform      Platform
  name          String
  enabled       Boolean           @default(true)
  
  // Configuration
  config        Json              @default("{}")
  credentials   Json              @default("{}") // Encrypted
  
  // Sync settings
  lastSyncAt    DateTime?
  syncStatus    SyncStatus        @default(PENDING)
  syncFrequency IntegrationSyncFrequency @default(REALTIME)
  
  // Error tracking
  errors        Json              @default("[]")
  
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  
  @@unique([storeId, platform])
  @@map("integrations")
}

// User Activity and Audit
model UserActivity {
  id            String         @id @default(cuid())
  tenantId      String
  tenant        Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId        String?
  user          User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Activity details
  action        String         // create, update, delete, etc.
  resource      String         // product, order, inventory, etc.
  resourceId    String?
  
  // Context
  description   String?
  ipAddress     String?
  userAgent     String?
  
  // Changes
  changes       Json?          // Before/after values
  
  createdAt     DateTime       @default(now())
  
  @@map("user_activities")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  USER
  VIEWER
}

enum PlanType {
  FREE
  STARTER
  GROWTH
  SCALE
  ENTERPRISE
}

enum TenantStatus {
  ACTIVE
  SUSPENDED
  CANCELLED
}

enum Platform {
  SHOPIFY
  AMAZON
  EBAY
  WOOCOMMERCE
  MAGENTO
  BIGCOMMERCE
  MANUAL
}

enum SyncStatus {
  PENDING
  SYNCING
  SUCCESS
  ERROR
  PAUSED
}

enum ABCClass {
  A
  B
  C
}

enum InventoryChangeType {
  SALE
  RETURN
  ADJUSTMENT
  TRANSFER
  DAMAGED
  RECEIVED
  RECOUNT
}

enum InventorySource {
  MANUAL
  SHOPIFY
  AMAZON
  EBAY
  SYSTEM
  API
}

enum ForecastPeriod {
  DAILY
  WEEKLY
  MONTHLY
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum OrderFinancialStatus {
  PENDING
  AUTHORIZED
  PAID
  PARTIALLY_PAID
  REFUNDED
  PARTIALLY_REFUNDED
}

enum OrderFulfillmentStatus {
  UNFULFILLED
  PARTIALLY_FULFILLED
  FULFILLED
}

enum PurchaseOrderStatus {
  DRAFT
  SENT
  CONFIRMED
  PARTIALLY_RECEIVED
  RECEIVED
  CANCELLED
}

enum IntegrationSyncFrequency {
  REALTIME
  EVERY_5_MINUTES
  EVERY_15_MINUTES
  EVERY_30_MINUTES
  HOURLY
  DAILY
}

// Indexes for performance
// Note: Prisma will generate these automatically, but we document them here
// @@index([tenantId, createdAt])
// @@index([productId, createdAt])
// @@index([storeId, platform])
// @@index([status, createdAt])
// etc.