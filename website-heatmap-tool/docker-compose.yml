version: '3.8'

services:
  # ===================
  # DATABASE SERVICES
  # ===================
  
  postgres:
    image: postgres:15-alpine
    container_name: heatmap-postgres
    environment:
      POSTGRES_DB: heatmap_db
      POSTGRES_USER: heatmap_user
      POSTGRES_PASSWORD: heatmap_password
      POSTGRES_MULTIPLE_DATABASES: heatmap_db,heatmap_test_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
      - ./infrastructure/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - heatmap-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U heatmap_user -d heatmap_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: heatmap-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./infrastructure/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - heatmap-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  clickhouse:
    image: clickhouse/clickhouse-server:23.8-alpine
    container_name: heatmap-clickhouse
    environment:
      CLICKHOUSE_DB: heatmap_analytics
      CLICKHOUSE_USER: heatmap_user
      CLICKHOUSE_PASSWORD: heatmap_password
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    ports:
      - "8123:8123"  # HTTP interface
      - "9000:9000"  # Native interface
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./infrastructure/clickhouse/config.xml:/etc/clickhouse-server/config.xml
      - ./infrastructure/clickhouse/users.xml:/etc/clickhouse-server/users.xml
      - ./infrastructure/clickhouse/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - heatmap-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===================
  # MESSAGE QUEUE
  # ===================

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: heatmap-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - heatmap-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: heatmap-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - heatmap-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ===================
  # BACKEND SERVICES
  # ===================

  event-collection:
    build:
      context: ./backend/event-collection
      dockerfile: Dockerfile
    container_name: heatmap-event-collection
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://heatmap_user:heatmap_password@postgres:5432/heatmap_db
      REDIS_URL: redis://redis:6379
      KAFKA_BROKERS: kafka:29092
      JWT_SECRET: your-jwt-secret-key
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./backend/event-collection:/app
      - /app/node_modules
    networks:
      - heatmap-network
    restart: unless-stopped

  analytics-processing:
    build:
      context: ./backend/analytics-processing
      dockerfile: Dockerfile
    container_name: heatmap-analytics-processing
    environment:
      NODE_ENV: development
      PORT: 3002
      DATABASE_URL: postgresql://heatmap_user:heatmap_password@postgres:5432/heatmap_db
      CLICKHOUSE_URL: http://heatmap_user:heatmap_password@clickhouse:8123/heatmap_analytics
      REDIS_URL: redis://redis:6379
      KAFKA_BROKERS: kafka:29092
    ports:
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./backend/analytics-processing:/app
      - /app/node_modules
    networks:
      - heatmap-network
    restart: unless-stopped

  heatmap-generation:
    build:
      context: ./backend/heatmap-generation
      dockerfile: Dockerfile
    container_name: heatmap-heatmap-generation
    environment:
      NODE_ENV: development
      PORT: 3003
      CLICKHOUSE_URL: http://heatmap_user:heatmap_password@clickhouse:8123/heatmap_analytics
      REDIS_URL: redis://redis:6379
    ports:
      - "3003:3003"
    depends_on:
      clickhouse:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/heatmap-generation:/app
      - /app/node_modules
    networks:
      - heatmap-network
    restart: unless-stopped

  user-management:
    build:
      context: ./backend/user-management
      dockerfile: Dockerfile
    container_name: heatmap-user-management
    environment:
      NODE_ENV: development
      PORT: 3004
      DATABASE_URL: postgresql://heatmap_user:heatmap_password@postgres:5432/heatmap_db
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-jwt-secret-key
      JWT_REFRESH_SECRET: your-jwt-refresh-secret-key
      STRIPE_SECRET_KEY: sk_test_your_stripe_secret_key
      SENDGRID_API_KEY: your_sendgrid_api_key
    ports:
      - "3004:3004"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/user-management:/app
      - /app/node_modules
    networks:
      - heatmap-network
    restart: unless-stopped

  privacy-service:
    build:
      context: ./backend/privacy-service
      dockerfile: Dockerfile
    container_name: heatmap-privacy-service
    environment:
      NODE_ENV: development
      PORT: 3005
      DATABASE_URL: postgresql://heatmap_user:heatmap_password@postgres:5432/heatmap_db
      REDIS_URL: redis://redis:6379
    ports:
      - "3005:3005"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/privacy-service:/app
      - /app/node_modules
    networks:
      - heatmap-network
    restart: unless-stopped

  ai-insights:
    build:
      context: ./backend/ai-insights
      dockerfile: Dockerfile
    container_name: heatmap-ai-insights
    environment:
      NODE_ENV: development
      PORT: 3006
      CLICKHOUSE_URL: http://heatmap_user:heatmap_password@clickhouse:8123/heatmap_analytics
      REDIS_URL: redis://redis:6379
      TENSORFLOW_MODELS_PATH: /app/models
    ports:
      - "3006:3006"
    depends_on:
      clickhouse:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/ai-insights:/app
      - ai_models:/app/models
      - /app/node_modules
    networks:
      - heatmap-network
    restart: unless-stopped

  # ===================
  # FRONTEND APPLICATION
  # ===================

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: heatmap-frontend
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXT_PUBLIC_WS_URL: ws://localhost:8000
      NEXTAUTH_SECRET: your-nextauth-secret
      NEXTAUTH_URL: http://localhost:3000
    ports:
      - "3000:3000"
    depends_on:
      - event-collection
      - user-management
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - heatmap-network
    restart: unless-stopped

  # ===================
  # API GATEWAY
  # ===================

  api-gateway:
    image: nginx:alpine
    container_name: heatmap-api-gateway
    ports:
      - "8000:80"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - event-collection
      - analytics-processing
      - heatmap-generation
      - user-management
      - privacy-service
      - ai-insights
    networks:
      - heatmap-network
    restart: unless-stopped

  # ===================
  # MONITORING SERVICES
  # ===================

  prometheus:
    image: prom/prometheus:latest
    container_name: heatmap-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - heatmap-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: heatmap-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - heatmap-network
    restart: unless-stopped

  # ===================
  # DEVELOPMENT TOOLS
  # ===================

  mailhog:
    image: mailhog/mailhog
    container_name: heatmap-mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - heatmap-network

networks:
  heatmap-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  clickhouse_data:
  kafka_data:
  ai_models:
  prometheus_data:
  grafana_data: