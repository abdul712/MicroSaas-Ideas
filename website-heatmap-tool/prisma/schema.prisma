// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  image     String?
  planId    String   @default("starter")
  settings  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  websites Website[]
  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Website {
  id         String   @id @default(cuid())
  userId     String
  domain     String
  name       String
  trackingId String   @unique @default(cuid())
  isActive   Boolean  @default(true)
  settings   Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  pageViews  PageView[]
  funnels    Funnel[]
  abTests    ABTest[]
  alerts     Alert[]

  @@index([userId])
  @@index([trackingId])
  @@map("websites")
}

model PageView {
  id             String   @id @default(cuid())
  websiteId      String
  sessionId      String
  url            String
  title          String?
  referrer       String?
  viewportWidth  Int
  viewportHeight Int
  documentWidth  Int?
  documentHeight Int?
  userAgent      String?
  ipAddress      String?
  language       String?
  timezone       String?
  timestamp      DateTime @default(now())

  // Relations
  website       Website       @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  clickEvents   ClickEvent[]
  mouseMoveEvents MouseMoveEvent[]
  scrollEvents  ScrollEvent[]
  customEvents  CustomEvent[]

  @@index([websiteId, timestamp])
  @@index([sessionId])
  @@index([url])
  @@map("page_views")
}

model ClickEvent {
  id                String   @id @default(cuid())
  pageViewId        String
  x                 Int
  y                 Int
  clientX           Int?
  clientY           Int?
  elementSelector   String
  elementPath       String?
  elementTag        String
  elementText       String?
  elementAttributes Json?
  timestamp         DateTime @default(now())

  // Relations
  pageView PageView @relation(fields: [pageViewId], references: [id], onDelete: Cascade)

  @@index([pageViewId])
  @@index([timestamp])
  @@map("click_events")
}

model MouseMoveEvent {
  id         String   @id @default(cuid())
  pageViewId String
  x          Int
  y          Int
  clientX    Int?
  clientY    Int?
  timestamp  DateTime @default(now())

  // Relations
  pageView PageView @relation(fields: [pageViewId], references: [id], onDelete: Cascade)

  @@index([pageViewId])
  @@index([timestamp])
  @@map("mouse_move_events")
}

model ScrollEvent {
  id             String   @id @default(cuid())
  pageViewId     String
  scrollX        Int
  scrollY        Int
  scrollDepth    Int
  viewportWidth  Int?
  viewportHeight Int?
  timestamp      DateTime @default(now())

  // Relations
  pageView PageView @relation(fields: [pageViewId], references: [id], onDelete: Cascade)

  @@index([pageViewId])
  @@index([timestamp])
  @@map("scroll_events")
}

model CustomEvent {
  id         String   @id @default(cuid())
  pageViewId String
  eventName  String
  properties Json?
  timestamp  DateTime @default(now())

  // Relations
  pageView PageView @relation(fields: [pageViewId], references: [id], onDelete: Cascade)

  @@index([pageViewId])
  @@index([eventName])
  @@index([timestamp])
  @@map("custom_events")
}

model Funnel {
  id        String   @id @default(cuid())
  websiteId String
  name      String
  steps     Json
  settings  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)

  @@index([websiteId])
  @@map("funnels")
}

model ABTest {
  id        String   @id @default(cuid())
  websiteId String
  name      String
  variants  Json
  status    String   @default("draft") // draft, running, paused, completed
  settings  Json?
  results   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)

  @@index([websiteId])
  @@index([status])
  @@map("ab_tests")
}

model Alert {
  id        String   @id @default(cuid())
  websiteId String
  name      String
  condition Json
  actions   Json
  enabled   Boolean  @default(true)
  lastTriggered DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)

  @@index([websiteId])
  @@index([enabled])
  @@map("alerts")
}

model SessionRecording {
  id             String   @id @default(cuid())
  websiteId      String
  sessionId      String
  startTime      DateTime
  endTime        DateTime?
  duration       Int?
  events         Json
  url            String
  viewportWidth  Int
  viewportHeight Int
  compressed     Boolean  @default(false)
  size           Int?
  createdAt      DateTime @default(now())

  @@index([websiteId])
  @@index([sessionId])
  @@index([startTime])
  @@map("session_recordings")
}

model Plan {
  id          String @id @default(cuid())
  name        String @unique
  displayName String
  description String?
  price       Int    // Price in cents
  interval    String // month, year
  features    Json
  active      Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("plans")
}

model Subscription {
  id                 String    @id @default(cuid())
  userId             String    @unique
  stripeCustomerId   String?   @unique
  stripeSubscriptionId String? @unique
  stripePriceId      String?
  status             String?
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@index([userId])
  @@index([stripeCustomerId])
  @@index([stripeSubscriptionId])
  @@map("subscriptions")
}

model Usage {
  id        String   @id @default(cuid())
  userId    String
  websiteId String?
  metric    String   // pageviews, api_calls, storage_mb
  value     Int
  date      DateTime @db.Date
  createdAt DateTime @default(now())

  @@unique([userId, websiteId, metric, date])
  @@index([userId])
  @@index([date])
  @@map("usage")
}

model ApiKey {
  id          String    @id @default(cuid())
  userId      String
  name        String
  key         String    @unique
  permissions Json      // Array of permissions
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@index([key])
  @@map("api_keys")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String?
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}