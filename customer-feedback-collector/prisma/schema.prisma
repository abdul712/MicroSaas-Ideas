// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authentication and User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      UserRole @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Multi-tenancy
  organizations OrganizationMember[]
  ownedOrgs     Organization[]

  // User activity
  sessions      Session[]
  apiKeys       ApiKey[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  domain      String?
  settings    Json     @default("{}")
  planType    PlanType @default(FREE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String

  // Relations
  owner       User                 @relation(fields: [ownerId], references: [id])
  members     OrganizationMember[]
  projects    Project[]
  apiKeys     ApiKey[]
  billing     Billing?
  usage       UsageMetric[]

  @@map("organizations")
}

model OrganizationMember {
  id       String     @id @default(cuid())
  userId   String
  orgId    String
  role     MemberRole @default(VIEWER)
  joinedAt DateTime   @default(now())

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@unique([userId, orgId])
  @@map("organization_members")
}

// API Keys for integrations
model ApiKey {
  id        String   @id @default(cuid())
  name      String
  key       String   @unique
  userId    String?
  orgId     String
  scopes    String[] @default([])
  lastUsed  DateTime?
  createdAt DateTime @default(now())
  expiresAt DateTime?

  user         User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

// Feedback Collection System
model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  slug        String
  orgId       String
  settings    Json          @default("{}")
  status      ProjectStatus @default(ACTIVE)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  organization Organization    @relation(fields: [orgId], references: [id], onDelete: Cascade)
  widgets      FeedbackWidget[]
  forms        FeedbackForm[]
  feedback     Feedback[]
  campaigns    Campaign[]
  integrations Integration[]

  @@unique([orgId, slug])
  @@map("projects")
}

model FeedbackWidget {
  id         String     @id @default(cuid())
  projectId  String
  name       String
  type       WidgetType
  settings   Json       @default("{}")
  isActive   Boolean    @default(true)
  embedCode  String     @unique
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  project  Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  feedback Feedback[]

  @@map("feedback_widgets")
}

model FeedbackForm {
  id          String     @id @default(cuid())
  projectId   String
  name        String
  description String?
  fields      Json       @default("[]")
  settings    Json       @default("{}")
  isActive    Boolean    @default(true)
  publicId    String     @unique
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  project   Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  feedback  Feedback[]
  responses FormResponse[]

  @@map("feedback_forms")
}

model FormResponse {
  id       String   @id @default(cuid())
  formId   String
  data     Json
  metadata Json     @default("{}")
  createdAt DateTime @default(now())

  form FeedbackForm @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@map("form_responses")
}

// Feedback Data
model Feedback {
  id         String         @id @default(cuid())
  projectId  String
  widgetId   String?
  formId     String?
  type       FeedbackType
  content    String
  rating     Int?
  metadata   Json           @default("{}")
  source     FeedbackSource @default(WIDGET)
  sentiment  SentimentType?
  category   String?
  tags       String[]       @default([])
  isPublic   Boolean        @default(false)
  status     FeedbackStatus @default(NEW)
  assignedTo String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  // Relations
  project Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  widget  FeedbackWidget? @relation(fields: [widgetId], references: [id], onDelete: SetNull)
  form    FeedbackForm?   @relation(fields: [formId], references: [id], onDelete: SetNull)
  customer Customer?      @relation(fields: [customerId], references: [id])
  analysis FeedbackAnalysis?

  // Customer information
  customerId String?

  @@index([projectId, createdAt])
  @@index([sentiment])
  @@index([category])
  @@index([status])
  @@map("feedback")
}

model Customer {
  id        String   @id @default(cuid())
  email     String?
  name      String?
  phone     String?
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  feedback Feedback[]

  @@map("customers")
}

// AI Analysis
model FeedbackAnalysis {
  id           String        @id @default(cuid())
  feedbackId   String        @unique
  sentiment    SentimentType
  confidence   Float
  topics       String[]      @default([])
  keywords     String[]      @default([])
  emotions     Json          @default("{}")
  intent       String?
  priority     AnalysisPriority @default(MEDIUM)
  suggestions  String[]      @default([])
  createdAt    DateTime      @default(now())

  feedback Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)

  @@map("feedback_analysis")
}

// Campaigns and Email Collection
model Campaign {
  id          String         @id @default(cuid())
  projectId   String
  name        String
  description String?
  type        CampaignType
  settings    Json           @default("{}")
  status      CampaignStatus @default(DRAFT)
  scheduledAt DateTime?
  sentAt      DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("campaigns")
}

// Integrations
model Integration {
  id        String            @id @default(cuid())
  projectId String
  type      IntegrationType
  settings  Json              @default("{}")
  isActive  Boolean           @default(true)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("integrations")
}

// Billing and Subscriptions
model Billing {
  id               String    @id @default(cuid())
  orgId            String    @unique
  stripeCustomerId String?   @unique
  planType         PlanType  @default(FREE)
  status           String    @default("active")
  currentPeriodEnd DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@map("billing")
}

// Usage tracking
model UsageMetric {
  id        String      @id @default(cuid())
  orgId     String
  metric    UsageType
  value     Int
  period    String // YYYY-MM format
  createdAt DateTime    @default(now())

  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@unique([orgId, metric, period])
  @@map("usage_metrics")
}

// Webhooks
model Webhook {
  id        String   @id @default(cuid())
  url       String
  events    String[] @default([])
  secret    String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("webhooks")
}

// Enums
enum UserRole {
  ADMIN
  MEMBER
}

enum MemberRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum PlanType {
  FREE
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum ProjectStatus {
  ACTIVE
  PAUSED
  ARCHIVED
}

enum WidgetType {
  POPUP
  SIDEBAR
  EMBEDDED
  FLOATING
  FULLSCREEN
}

enum FeedbackType {
  RATING
  TEXT
  NPS
  CSAT
  CES
  SURVEY
  BUG_REPORT
  FEATURE_REQUEST
}

enum FeedbackSource {
  WIDGET
  FORM
  EMAIL
  API
  SMS
  INTEGRATION
}

enum FeedbackStatus {
  NEW
  IN_PROGRESS
  RESOLVED
  CLOSED
  ARCHIVED
}

enum SentimentType {
  POSITIVE
  NEGATIVE
  NEUTRAL
}

enum AnalysisPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum CampaignType {
  EMAIL_SURVEY
  SMS_SURVEY
  IN_APP_NOTIFICATION
  FOLLOW_UP
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENT
  COMPLETED
  CANCELLED
}

enum IntegrationType {
  SLACK
  TEAMS
  DISCORD
  WEBHOOK
  ZAPIER
  SALESFORCE
  HUBSPOT
  INTERCOM
  ZENDESK
}

enum UsageType {
  FEEDBACK_COLLECTED
  AI_ANALYSIS
  EMAIL_SENT
  API_CALLS
  STORAGE_USED
}