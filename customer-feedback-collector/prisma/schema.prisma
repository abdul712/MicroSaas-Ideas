// Prisma schema for Customer Feedback Collector
// Multi-tenant SaaS with comprehensive feedback collection and analytics

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// AUTHENTICATION & USER MANAGEMENT
// ============================================================================

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  emailVerified     DateTime? @map("email_verified")
  name              String?
  image             String?
  password          String?   // For email/password auth
  role              Role      @default(MEMBER)
  organizationId    String    @map("organization_id")
  lastActiveAt      DateTime  @default(now()) @map("last_active_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  accounts          Account[]
  sessions          Session[]
  surveys           Survey[]
  createdWidgets    Widget[]
  auditLogs         AuditLog[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ============================================================================
// ORGANIZATION & MULTI-TENANCY
// ============================================================================

model Organization {
  id              String            @id @default(cuid())
  name            String
  slug            String            @unique
  domain          String?           @unique
  logo            String?
  settings        Json              @default("{}")
  subscriptionId  String?           @unique @map("subscription_id")
  planId          String            @map("plan_id")
  status          OrganizationStatus @default(ACTIVE)
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")

  // Relations
  users           User[]
  surveys         Survey[]
  responses       Response[]
  widgets         Widget[]
  integrations    Integration[]
  subscription    Subscription?
  plan            Plan             @relation(fields: [planId], references: [id])
  auditLogs       AuditLog[]
  exports         Export[]

  @@map("organizations")
}

// ============================================================================
// SUBSCRIPTION & BILLING
// ============================================================================

model Plan {
  id                    String    @id @default(cuid())
  name                  String
  slug                  String    @unique
  description           String?
  price                 Int       // Price in cents
  currency              String    @default("usd")
  interval              String    // month, year
  maxSurveys            Int       @default(0) // 0 = unlimited
  maxResponses          Int       @default(0) // per month, 0 = unlimited
  maxTeamMembers        Int       @default(0) // 0 = unlimited
  features              Json      @default("[]")
  isActive              Boolean   @default(true) @map("is_active")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  // Relations
  organizations         Organization[]
  subscriptions         Subscription[]

  @@map("plans")
}

model Subscription {
  id                    String            @id @default(cuid())
  organizationId        String            @unique @map("organization_id")
  planId                String            @map("plan_id")
  stripeCustomerId      String?           @unique @map("stripe_customer_id")
  stripeSubscriptionId  String?           @unique @map("stripe_subscription_id")
  status                SubscriptionStatus
  currentPeriodStart    DateTime          @map("current_period_start")
  currentPeriodEnd      DateTime          @map("current_period_end")
  cancelAtPeriodEnd     Boolean           @default(false) @map("cancel_at_period_end")
  createdAt             DateTime          @default(now()) @map("created_at")
  updatedAt             DateTime          @updatedAt @map("updated_at")

  // Relations
  organization          Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  plan                  Plan              @relation(fields: [planId], references: [id])
  usageRecords          UsageRecord[]

  @@map("subscriptions")
}

model UsageRecord {
  id             String       @id @default(cuid())
  subscriptionId String       @map("subscription_id")
  metric         String       // responses, surveys, team_members
  quantity       Int
  timestamp      DateTime     @default(now())
  periodStart    DateTime     @map("period_start")
  periodEnd      DateTime     @map("period_end")

  // Relations
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@map("usage_records")
}

// ============================================================================
// SURVEY MANAGEMENT
// ============================================================================

model Survey {
  id               String        @id @default(cuid())
  organizationId   String        @map("organization_id")
  userId           String        @map("user_id")
  title            String
  description      String?
  slug             String
  settings         Json          @default("{}")
  theme            Json          @default("{}")
  status           SurveyStatus  @default(DRAFT)
  publishedAt      DateTime?     @map("published_at")
  closedAt         DateTime?     @map("closed_at")
  responseLimit    Int?          @map("response_limit")
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")

  // Relations
  organization     Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user             User          @relation(fields: [userId], references: [id])
  questions        Question[]
  responses        Response[]
  widgets          Widget[]
  analytics        Analytics[]
  tags             SurveyTag[]

  @@unique([organizationId, slug])
  @@map("surveys")
}

model Question {
  id           String       @id @default(cuid())
  surveyId     String       @map("survey_id")
  type         QuestionType
  title        String
  description  String?
  placeholder  String?
  required     Boolean      @default(false)
  options      Json?        // For multiple choice, rating scales
  validation   Json?        // Validation rules
  logic        Json?        // Branching logic
  order        Int
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")

  // Relations
  survey       Survey       @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  answers      Answer[]

  @@map("questions")
}

// ============================================================================
// RESPONSE COLLECTION
// ============================================================================

model Response {
  id               String        @id @default(cuid())
  surveyId         String        @map("survey_id")
  organizationId   String        @map("organization_id")
  respondentId     String?       @map("respondent_id") // Optional for anonymous
  sessionId        String?       @map("session_id")
  status           ResponseStatus @default(IN_PROGRESS)
  completedAt      DateTime?     @map("completed_at")
  timeSpent        Int?          @map("time_spent") // seconds
  source           String?       // widget, email, direct_link
  userAgent        String?       @map("user_agent")
  ipAddress        String?       @map("ip_address")
  location         Json?         // Geographic data
  metadata         Json          @default("{}")
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")

  // Relations
  survey           Survey        @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  organization     Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  respondent       Respondent?   @relation(fields: [respondentId], references: [id])
  answers          Answer[]
  sentimentAnalysis SentimentAnalysis[]

  @@map("responses")
}

model Answer {
  id           String     @id @default(cuid())
  responseId   String     @map("response_id")
  questionId   String     @map("question_id")
  value        Json       // Flexible storage for any answer type
  textValue    String?    @map("text_value") // For full-text search
  numberValue  Float?     @map("number_value") // For numeric queries
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  // Relations
  response     Response   @relation(fields: [responseId], references: [id], onDelete: Cascade)
  question     Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("answers")
}

model Respondent {
  id           String     @id @default(cuid())
  email        String?
  name         String?
  phone        String?
  properties   Json       @default("{}") // Custom properties
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  // Relations
  responses    Response[]

  @@map("respondents")
}

// ============================================================================
// AI ANALYSIS & SENTIMENT
// ============================================================================

model SentimentAnalysis {
  id           String                @id @default(cuid())
  responseId   String                @map("response_id")
  overallScore Float                 @map("overall_score") // -1 to 1
  sentiment    SentimentType
  confidence   Float
  emotions     Json?                 // Detailed emotion breakdown
  topics       Json?                 // Extracted topics/themes
  keywords     Json?                 // Key phrases
  language     String?
  processedAt  DateTime              @default(now()) @map("processed_at")

  // Relations
  response     Response              @relation(fields: [responseId], references: [id], onDelete: Cascade)

  @@map("sentiment_analysis")
}

// ============================================================================
// WIDGETS & EMBEDDING
// ============================================================================

model Widget {
  id             String       @id @default(cuid())
  organizationId String       @map("organization_id")
  surveyId       String       @map("survey_id")
  userId         String       @map("user_id")
  name           String
  type           WidgetType
  settings       Json         @default("{}")
  appearance     Json         @default("{}")
  triggers       Json         @default("{}")
  targeting      Json         @default("{}")
  status         WidgetStatus @default(ACTIVE)
  embedCode      String       @map("embed_code")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  survey         Survey       @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id])

  @@map("widgets")
}

// ============================================================================
// ANALYTICS & REPORTING
// ============================================================================

model Analytics {
  id             String        @id @default(cuid())
  surveyId       String        @map("survey_id")
  metricType     AnalyticType
  dimensions     Json          @default("{}") // Grouping dimensions
  metrics        Json          @default("{}") // Metric values
  periodStart    DateTime      @map("period_start")
  periodEnd      DateTime      @map("period_end")
  granularity    String        @default("day") // hour, day, week, month
  createdAt      DateTime      @default(now()) @map("created_at")

  // Relations
  survey         Survey        @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  @@map("analytics")
}

// ============================================================================
// INTEGRATIONS & WEBHOOKS
// ============================================================================

model Integration {
  id             String            @id @default(cuid())
  organizationId String            @map("organization_id")
  type           IntegrationType
  name           String
  config         Json              @default("{}")
  credentials    Json              @default("{}")
  status         IntegrationStatus @default(ACTIVE)
  lastSyncAt     DateTime?         @map("last_sync_at")
  createdAt      DateTime          @default(now()) @map("created_at")
  updatedAt      DateTime          @updatedAt @map("updated_at")

  // Relations
  organization   Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  webhookEvents  WebhookEvent[]

  @@map("integrations")
}

model WebhookEvent {
  id            String          @id @default(cuid())
  integrationId String          @map("integration_id")
  eventType     String          @map("event_type")
  payload       Json
  status        WebhookStatus   @default(PENDING)
  attempts      Int             @default(0)
  lastAttemptAt DateTime?       @map("last_attempt_at")
  nextAttemptAt DateTime?       @map("next_attempt_at")
  error         String?
  createdAt     DateTime        @default(now()) @map("created_at")

  // Relations
  integration   Integration     @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@map("webhook_events")
}

// ============================================================================
// DATA EXPORT & COMPLIANCE
// ============================================================================

model Export {
  id             String       @id @default(cuid())
  organizationId String       @map("organization_id")
  type           ExportType
  format         ExportFormat
  filters        Json         @default("{}")
  status         ExportStatus @default(PROCESSING)
  fileUrl        String?      @map("file_url")
  fileName       String?      @map("file_name")
  recordCount    Int?         @map("record_count")
  expiresAt      DateTime     @map("expires_at")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("exports")
}

// ============================================================================
// TAGS & CATEGORIZATION
// ============================================================================

model SurveyTag {
  id       String @id @default(cuid())
  surveyId String @map("survey_id")
  name     String
  color    String @default("#3B82F6")

  // Relations
  survey   Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  @@unique([surveyId, name])
  @@map("survey_tags")
}

// ============================================================================
// AUDIT & COMPLIANCE
// ============================================================================

model AuditLog {
  id             String      @id @default(cuid())
  organizationId String      @map("organization_id")
  userId         String?     @map("user_id")
  action         String
  resource       String
  resourceId     String?     @map("resource_id")
  changes        Json?
  ipAddress      String?     @map("ip_address")
  userAgent      String?     @map("user_agent")
  timestamp      DateTime    @default(now())

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User?       @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

// ============================================================================
// ENUMS
// ============================================================================

enum Role {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum OrganizationStatus {
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  INCOMPLETE
}

enum SurveyStatus {
  DRAFT
  PUBLISHED
  PAUSED
  CLOSED
  ARCHIVED
}

enum QuestionType {
  TEXT
  TEXTAREA
  EMAIL
  URL
  NUMBER
  PHONE
  DATE
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  RATING
  NPS
  SCALE
  MATRIX
  FILE_UPLOAD
  SIGNATURE
}

enum ResponseStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

enum WidgetType {
  POPUP
  SLIDE_IN
  EMBEDDED
  FLOATING_TAB
  INLINE
  MODAL
}

enum WidgetStatus {
  ACTIVE
  PAUSED
  ARCHIVED
}

enum SentimentType {
  POSITIVE
  NEGATIVE
  NEUTRAL
  MIXED
}

enum AnalyticType {
  RESPONSE_RATE
  COMPLETION_RATE
  AVERAGE_TIME
  NPS_SCORE
  SENTIMENT_SCORE
  TRAFFIC_SOURCE
  GEOGRAPHIC
  DEVICE_TYPE
}

enum IntegrationType {
  WEBHOOK
  SLACK
  ZAPIER
  HUBSPOT
  SALESFORCE
  MAILCHIMP
  GOOGLE_SHEETS
  NOTION
}

enum IntegrationStatus {
  ACTIVE
  PAUSED
  ERROR
  DISCONNECTED
}

enum WebhookStatus {
  PENDING
  DELIVERED
  FAILED
  CANCELED
}

enum ExportType {
  RESPONSES
  ANALYTICS
  CONTACTS
  SURVEYS
}

enum ExportFormat {
  CSV
  JSON
  PDF
  XLSX
}