version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: fraudshield-postgres
    environment:
      POSTGRES_DB: fraudshield
      POSTGRES_USER: fraudshield
      POSTGRES_PASSWORD: securepassword123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - fraudshield-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fraudshield"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: fraudshield-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - fraudshield-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redispassword123
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  influxdb:
    image: influxdb:2.7-alpine
    container_name: fraudshield-influxdb
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: fraudshield
      DOCKER_INFLUXDB_INIT_PASSWORD: influxpassword123
      DOCKER_INFLUXDB_INIT_ORG: fraudshield
      DOCKER_INFLUXDB_INIT_BUCKET: transactions
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: influxtoken123456789
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
    networks:
      - fraudshield-network
    restart: unless-stopped

  # Event Streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: fraudshield-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - fraudshield-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: fraudshield-kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "fraud-alerts:1:1,transaction-events:3:1,model-updates:1:1"
    ports:
      - "9092:9092"
    networks:
      - fraudshield-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ML Model Service
  ml-service:
    build:
      context: ./backend/ml-service
      dockerfile: Dockerfile
    container_name: fraudshield-ml-service
    environment:
      ENVIRONMENT: development
      REDIS_URL: redis://:redispassword123@redis:6379/0
      DATABASE_URL: postgresql://fraudshield:securepassword123@postgres:5432/fraudshield
      INFLUXDB_URL: http://influxdb:8086
      INFLUXDB_TOKEN: influxtoken123456789
      INFLUXDB_ORG: fraudshield
      MODEL_CACHE_TTL: 3600
      FEATURE_STORE_TTL: 300
    ports:
      - "8001:8001"
    volumes:
      - ./backend/ml-service:/app
      - ml_models:/app/models
    networks:
      - fraudshield-network
    depends_on:
      - postgres
      - redis
      - influxdb
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Fraud Detection Service
  fraud-detection-service:
    build:
      context: ./backend/fraud-detection-service
      dockerfile: Dockerfile
    container_name: fraudshield-fraud-service
    environment:
      ENVIRONMENT: development
      DATABASE_URL: postgresql://fraudshield:securepassword123@postgres:5432/fraudshield
      REDIS_URL: redis://:redispassword123@redis:6379/0
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      ML_SERVICE_URL: http://ml-service:8001
      RULES_ENGINE_URL: http://rules-engine:3001
      API_RATE_LIMIT: 1000
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      CORS_ORIGINS: http://localhost:3000,http://localhost:3001
    ports:
      - "8000:8000"
    volumes:
      - ./backend/fraud-detection-service:/app
    networks:
      - fraudshield-network
    depends_on:
      - postgres
      - redis
      - kafka
      - ml-service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Rules Engine Service
  rules-engine:
    build:
      context: ./backend/rules-engine
      dockerfile: Dockerfile
    container_name: fraudshield-rules-engine
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://fraudshield:securepassword123@postgres:5432/fraudshield
      REDIS_URL: redis://:redispassword123@redis:6379/0
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      PORT: 3001
    ports:
      - "3001:3001"
    volumes:
      - ./backend/rules-engine:/app
    networks:
      - fraudshield-network
    depends_on:
      - postgres
      - redis
      - kafka
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway
  kong:
    image: kong:3.4-alpine
    container_name: fraudshield-api-gateway
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    ports:
      - "8080:8000"
      - "8443:8443"
      - "8002:8001"
      - "8445:8444"
    volumes:
      - ./infrastructure/kong/kong.yml:/kong/declarative/kong.yml:ro
    networks:
      - fraudshield-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Dashboard
  dashboard:
    build:
      context: ./frontend/dashboard
      dockerfile: Dockerfile
    container_name: fraudshield-dashboard
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8080
      NEXT_PUBLIC_WS_URL: ws://localhost:8080
      NODE_ENV: development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/dashboard:/app
      - /app/node_modules
    networks:
      - fraudshield-network
    depends_on:
      - kong
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: fraudshield-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - fraudshield-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: fraudshield-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: grafanaadmin123
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3002:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - fraudshield-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # ELK Stack for Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: fraudshield-elasticsearch
    environment:
      discovery.type: single-node
      xpack.security.enabled: false
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - fraudshield-network
    restart: unless-stopped

  logstash:
    image: docker.elastic.co/logstash/logstash:8.10.0
    container_name: fraudshield-logstash
    volumes:
      - ./infrastructure/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    ports:
      - "5044:5044"
      - "9600:9600"
    networks:
      - fraudshield-network
    depends_on:
      - elasticsearch
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.0
    container_name: fraudshield-kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - fraudshield-network
    depends_on:
      - elasticsearch
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  influxdb_data:
  ml_models:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  fraudshield-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16