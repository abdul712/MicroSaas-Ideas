version: '3.8'

services:
  # Frontend - Next.js 14 Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8080/api/v1
      - NEXT_PUBLIC_WS_URL=ws://localhost:8080
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - sales-dashboard-network

  # Backend - Node.js API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=development
      - PORT=8080
      - DATABASE_URL=postgresql://sales_user:sales_password@postgres:5432/sales_dashboard
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - JWT_REFRESH_SECRET=your-super-secret-refresh-key-change-in-production
      - CORS_ORIGIN=http://localhost:3000
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
      - timescaledb
    networks:
      - sales-dashboard-network

  # AI/ML Service - Python FastAPI
  ml-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://sales_user:sales_password@timescaledb:5432/sales_analytics
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./ml-service:/app
    depends_on:
      - timescaledb
      - redis
    networks:
      - sales-dashboard-network

  # PostgreSQL - Primary Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=sales_dashboard
      - POSTGRES_USER=sales_user
      - POSTGRES_PASSWORD=sales_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - sales-dashboard-network

  # TimescaleDB - Time-series Analytics
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    environment:
      - POSTGRES_DB=sales_analytics
      - POSTGRES_USER=sales_user
      - POSTGRES_PASSWORD=sales_password
    ports:
      - "5433:5432"
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
      - ./database/timescale:/docker-entrypoint-initdb.d
    networks:
      - sales-dashboard-network

  # Redis - Caching and Session Storage
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - sales-dashboard-network

  # Nginx - Load Balancer and Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - sales-dashboard-network

  # Grafana - Monitoring Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - sales-dashboard-network

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - sales-dashboard-network

volumes:
  postgres_data:
  timescaledb_data:
  redis_data:
  grafana_data:
  prometheus_data:

networks:
  sales-dashboard-network:
    driver: bridge