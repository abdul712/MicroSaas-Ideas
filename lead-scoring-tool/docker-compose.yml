version: '3.8'

services:
  # Frontend - Next.js React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
    depends_on:
      - backend
    networks:
      - lead-scoring-network

  # Backend - FastAPI Python Application  
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    environment:
      - DATABASE_URL=postgresql://leadscoring:password@postgres:5432/lead_scoring_db
      - REDIS_URL=redis://redis:6379
      - CLICKHOUSE_URL=http://clickhouse:8123
      - JWT_SECRET_KEY=dev-secret-key-change-in-production
      - ML_SERVICE_URL=http://ml-service:8001
    depends_on:
      - postgres
      - redis
      - clickhouse
    networks:
      - lead-scoring-network

  # ML Service - Machine Learning Microservice
  ml-service:
    build:
      context: ./ml-services
      dockerfile: Dockerfile
      target: development
    ports:
      - "8001:8001"
    volumes:
      - ./ml-services:/app
      - ml-models:/app/models
    environment:
      - REDIS_URL=redis://redis:6379
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - MODEL_REGISTRY_PATH=/app/models
    depends_on:
      - redis
      - mlflow
    networks:
      - lead-scoring-network

  # Data Integration Service
  integration-service:
    build:
      context: ./data-integration
      dockerfile: Dockerfile
      target: development
    ports:
      - "8002:8002"
    volumes:
      - ./data-integration:/app
    environment:
      - DATABASE_URL=postgresql://leadscoring:password@postgres:5432/lead_scoring_db
      - REDIS_URL=redis://redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - lead-scoring-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=lead_scoring_db
      - POSTGRES_USER=leadscoring
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend/database/init:/docker-entrypoint-initdb.d
    networks:
      - lead-scoring-network

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - lead-scoring-network

  # ClickHouse Analytics Database
  clickhouse:
    image: clickhouse/clickhouse-server:23-alpine
    ports:
      - "8123:8123"
      - "9000:9000"
    environment:
      - CLICKHOUSE_DB=analytics
      - CLICKHOUSE_USER=clickhouse
      - CLICKHOUSE_PASSWORD=password
    volumes:
      - clickhouse-data:/var/lib/clickhouse
      - ./infrastructure/clickhouse/init:/docker-entrypoint-initdb.d
    networks:
      - lead-scoring-network

  # Apache Kafka for Event Streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - lead-scoring-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - lead-scoring-network

  # MLflow for ML Model Management
  mlflow:
    image: python:3.11-slim
    ports:
      - "5000:5000"
    volumes:
      - mlflow-artifacts:/app/mlruns
    command: >
      bash -c "pip install mlflow psycopg2-binary &&
               mlflow server --host 0.0.0.0 --port 5000 
               --backend-store-uri postgresql://leadscoring:password@postgres:5432/lead_scoring_db
               --default-artifact-root /app/mlruns"
    depends_on:
      - postgres
    networks:
      - lead-scoring-network

  # Elasticsearch for Logging and Search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - lead-scoring-network

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - lead-scoring-network

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - lead-scoring-network

  # Grafana for Metrics Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./infrastructure/grafana/dashboards:/var/lib/grafana/dashboards
      - ./infrastructure/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - lead-scoring-network

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - lead-scoring-network

  # MinIO for Object Storage (S3 Compatible)
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=minio123
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    networks:
      - lead-scoring-network

volumes:
  postgres-data:
  redis-data:
  clickhouse-data:
  elasticsearch-data:
  prometheus-data:
  grafana-data:
  mlflow-artifacts:
  ml-models:
  minio-data:

networks:
  lead-scoring-network:
    driver: bridge