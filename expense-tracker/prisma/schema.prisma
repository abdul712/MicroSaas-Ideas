// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String            @id @default(cuid())
  name                  String?
  email                 String            @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole          @default(USER)
  mfaEnabled            Boolean           @default(false)
  mfaSecret             String?
  businessName          String?
  taxId                 String?
  currency              String            @default("USD")
  timezone              String            @default("America/New_York")
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  
  accounts              Account[]
  sessions              Session[]
  expenses              Expense[]
  categories            Category[]
  budgets               Budget[]
  receipts              Receipt[]
  bankAccounts          BankAccount[]
  reports               Report[]
  teamMemberships       TeamMembership[]
  ownedTeams            Team[]            @relation("TeamOwner")
  
  @@map("users")
}

model Team {
  id              String           @id @default(cuid())
  name            String
  description     String?
  currency        String           @default("USD")
  timezone        String           @default("America/New_York")
  ownerId         String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  owner           User             @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members         TeamMembership[]
  expenses        Expense[]
  categories      Category[]
  budgets         Budget[]
  approvalRules   ApprovalRule[]
  
  @@map("teams")
}

model TeamMembership {
  id        String    @id @default(cuid())
  userId    String
  teamId    String
  role      TeamRole  @default(MEMBER)
  joinedAt  DateTime  @default(now())
  
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  @@unique([userId, teamId])
  @@map("team_memberships")
}

model Category {
  id            String     @id @default(cuid())
  name          String
  description   String?
  color         String     @default("#3B82F6")
  icon          String?
  parentId      String?
  userId        String?
  teamId        String?
  isDefault     Boolean    @default(false)
  taxDeductible Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  parent        Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children      Category[] @relation("CategoryHierarchy")
  user          User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  team          Team?      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  expenses      Expense[]
  budgets       Budget[]
  
  @@map("categories")
}

model Expense {
  id              String          @id @default(cuid())
  title           String
  description     String?
  amount          Decimal         @db.Decimal(10, 2)
  currency        String          @default("USD")
  date            DateTime
  merchant        String?
  categoryId      String
  subcategoryId   String?
  userId          String
  teamId          String?
  receiptId       String?         @unique
  bankAccountId   String?
  status          ExpenseStatus   @default(PENDING)
  paymentMethod   PaymentMethod   @default(CASH)
  isRecurring     Boolean         @default(false)
  recurringRule   Json?
  taxDeductible   Boolean         @default(false)
  reimbursable    Boolean         @default(false)
  billable        Boolean         @default(false)
  clientId        String?
  projectId       String?
  notes           String?
  tags            String[]
  metadata        Json?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  category        Category        @relation(fields: [categoryId], references: [id])
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  team            Team?           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  receipt         Receipt?        @relation(fields: [receiptId], references: [id])
  bankAccount     BankAccount?    @relation(fields: [bankAccountId], references: [id])
  approvals       ExpenseApproval[]
  
  @@index([userId])
  @@index([teamId])
  @@index([categoryId])
  @@index([date])
  @@map("expenses")
}

model Receipt {
  id              String        @id @default(cuid())
  fileName        String
  originalName    String
  fileSize        Int
  mimeType        String
  s3Key           String
  s3Bucket        String
  s3Url           String
  ocrText         String?
  ocrData         Json?
  ocrStatus       OCRStatus     @default(PENDING)
  ocrProcessedAt  DateTime?
  userId          String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  expense         Expense?
  
  @@index([userId])
  @@map("receipts")
}

model BankAccount {
  id              String              @id @default(cuid())
  name            String
  type            BankAccountType
  mask            String
  subtype         String?
  institutionId   String
  institutionName String
  plaidAccountId  String?             @unique
  plaidItemId     String?
  isActive        Boolean             @default(true)
  currency        String              @default("USD")
  balance         Decimal?            @db.Decimal(10, 2)
  availableBalance Decimal?           @db.Decimal(10, 2)
  lastSyncAt      DateTime?
  userId          String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses        Expense[]
  transactions    BankTransaction[]
  
  @@index([userId])
  @@index([plaidAccountId])
  @@map("bank_accounts")
}

model BankTransaction {
  id              String            @id @default(cuid())
  bankAccountId   String
  plaidTransactionId String?        @unique
  amount          Decimal           @db.Decimal(10, 2)
  currency        String            @default("USD")
  date            DateTime
  name            String
  merchantName    String?
  category        String[]
  subcategory     String[]
  paymentChannel  String?
  isoCurrencyCode String?
  accountOwner    String?
  location        Json?
  paymentMeta     Json?
  pending         Boolean           @default(false)
  transactionType TransactionType
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  bankAccount     BankAccount       @relation(fields: [bankAccountId], references: [id], onDelete: Cascade)
  
  @@index([bankAccountId])
  @@index([date])
  @@map("bank_transactions")
}

model Budget {
  id            String       @id @default(cuid())
  name          String
  description   String?
  amount        Decimal      @db.Decimal(10, 2)
  spent         Decimal      @default(0) @db.Decimal(10, 2)
  currency      String       @default("USD")
  period        BudgetPeriod @default(MONTHLY)
  startDate     DateTime
  endDate       DateTime?
  categoryId    String?
  userId        String
  teamId        String?
  isActive      Boolean      @default(true)
  alertThreshold Decimal?    @db.Decimal(5, 2)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  category      Category?    @relation(fields: [categoryId], references: [id])
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  team          Team?        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([teamId])
  @@map("budgets")
}

model Report {
  id          String     @id @default(cuid())
  name        String
  description String?
  type        ReportType
  parameters  Json
  data        Json?
  status      ReportStatus @default(GENERATING)
  userId      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@map("reports")
}

model ApprovalRule {
  id          String       @id @default(cuid())
  name        String
  description String?
  teamId      String
  conditions  Json
  approvers   String[]
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  team        Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  @@map("approval_rules")
}

model ExpenseApproval {
  id          String         @id @default(cuid())
  expenseId   String
  approverId  String
  status      ApprovalStatus @default(PENDING)
  comments    String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  expense     Expense        @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  
  @@unique([expenseId, approverId])
  @@map("expense_approvals")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Enums
enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum TeamRole {
  MEMBER
  ADMIN
  OWNER
}

enum ExpenseStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
  PAID
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  CHECK
  DIGITAL_WALLET
  OTHER
}

enum OCRStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum BankAccountType {
  CHECKING
  SAVINGS
  CREDIT
  INVESTMENT
  LOAN
  OTHER
}

enum TransactionType {
  PLACE
  SPECIAL
  DIGITAL
  UNRESOLVED
}

enum BudgetPeriod {
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
  CUSTOM
}

enum ReportType {
  EXPENSE_SUMMARY
  TAX_REPORT
  BUDGET_ANALYSIS
  CATEGORY_BREAKDOWN
  CUSTOM
}

enum ReportStatus {
  GENERATING
  COMPLETED
  FAILED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}