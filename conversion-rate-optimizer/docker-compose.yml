version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cro-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: conversion_rate_optimizer
      POSTGRES_USER: cro_user
      POSTGRES_PASSWORD: cro_password_2024
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/prisma/seed.sql:/docker-entrypoint-initdb.d/seed.sql:ro
    ports:
      - "5432:5432"
    networks:
      - cro-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cro_user -d conversion_rate_optimizer"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: cro-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password_2024
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - cro-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Server
  api:
    build:
      context: ./server
      dockerfile: Dockerfile
      target: production
    container_name: cro-api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgresql://cro_user:cro_password_2024@postgres:5432/conversion_rate_optimizer
      REDIS_URL: redis://:redis_password_2024@redis:6379
      JWT_SECRET: your_super_secure_jwt_secret_key_change_in_production
      JWT_EXPIRES_IN: 7d
      CLIENT_URL: http://localhost:3000
      LOG_LEVEL: info
    ports:
      - "5000:5000"
    networks:
      - cro-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./server/logs:/app/logs
      - ./server/uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Web Application
  web:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: production
    container_name: cro-web
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:5000/api
      NEXT_PUBLIC_WS_URL: ws://localhost:5000
    ports:
      - "3000:3000"
    networks:
      - cro-network
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: cro-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    networks:
      - cro-network
    depends_on:
      - web
      - api
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: cro-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - cro-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: cro-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: grafana_admin_2024
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3001:3000"
    networks:
      - cro-network
    depends_on:
      - prometheus

  # Background Job Worker
  worker:
    build:
      context: ./server
      dockerfile: Dockerfile
      target: production
    container_name: cro-worker
    restart: unless-stopped
    command: ["node", "dist/worker.js"]
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://cro_user:cro_password_2024@postgres:5432/conversion_rate_optimizer
      REDIS_URL: redis://:redis_password_2024@redis:6379
      LOG_LEVEL: info
    networks:
      - cro-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./server/logs:/app/logs

  # Database Backup Service
  db-backup:
    image: postgres:15-alpine
    container_name: cro-db-backup
    restart: "no"
    environment:
      PGPASSWORD: cro_password_2024
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - cro-network
    depends_on:
      - postgres
    entrypoint: ["/bin/sh", "/backup.sh"]

networks:
  cro-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local