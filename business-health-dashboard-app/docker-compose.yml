version: '3.8'

services:
  # PostgreSQL database with TimescaleDB extension
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: business-health-postgres
    environment:
      POSTGRES_DB: business_health_dashboard
      POSTGRES_USER: business_health
      POSTGRES_PASSWORD: secure_password_change_in_production
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - business-health-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U business_health -d business_health_dashboard"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and real-time features
  redis:
    image: redis:7-alpine
    container_name: business-health-redis
    command: redis-server --appendonly yes --requirepass redis_password_change_in_production
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - business-health-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI backend application
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: business-health-api
    environment:
      - DATABASE_URL=postgresql://business_health:secure_password_change_in_production@postgres:5432/business_health_dashboard
      - REDIS_URL=redis://:redis_password_change_in_production@redis:6379/0
      - CELERY_BROKER_URL=redis://:redis_password_change_in_production@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:redis_password_change_in_production@redis:6379/1
      - SECRET_KEY=your-super-secret-key-change-in-production
      - DEBUG=true
      - ENVIRONMENT=development
      - CORS_ORIGINS=http://localhost:3000,http://localhost:3001
    volumes:
      - ./backend:/app
      - ./backend/logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - business-health-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Celery worker for background tasks
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: business-health-celery-worker
    command: celery -A app.core.celery worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://business_health:secure_password_change_in_production@postgres:5432/business_health_dashboard
      - REDIS_URL=redis://:redis_password_change_in_production@redis:6379/0
      - CELERY_BROKER_URL=redis://:redis_password_change_in_production@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:redis_password_change_in_production@redis:6379/1
      - SECRET_KEY=your-super-secret-key-change-in-production
      - ENVIRONMENT=development
    volumes:
      - ./backend:/app
      - ./backend/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - business-health-network
    restart: unless-stopped

  # Celery beat scheduler for periodic tasks
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: business-health-celery-beat
    command: celery -A app.core.celery beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://business_health:secure_password_change_in_production@postgres:5432/business_health_dashboard
      - REDIS_URL=redis://:redis_password_change_in_production@redis:6379/0
      - CELERY_BROKER_URL=redis://:redis_password_change_in_production@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:redis_password_change_in_production@redis:6379/1
      - SECRET_KEY=your-super-secret-key-change-in-production
      - ENVIRONMENT=development
    volumes:
      - ./backend:/app
      - ./backend/logs:/app/logs
      - celery_beat_data:/app/celerybeat-schedule
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - business-health-network
    restart: unless-stopped

  # Next.js frontend application
  web:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: development
    container_name: business-health-web
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - API_URL=http://api:8000
      - NEXTAUTH_SECRET=your-nextauth-secret-change-in-production
      - NEXTAUTH_URL=http://localhost:3000
    volumes:
      - ./src:/app/src
      - ./public:/app/public
      - ./.next:/app/.next
      - ./node_modules:/app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_healthy
    networks:
      - business-health-network
    restart: unless-stopped

  # Nginx reverse proxy (optional, for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: business-health-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
      - web
    networks:
      - business-health-network
    restart: unless-stopped
    profiles:
      - production

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: business-health-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - business-health-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: business-health-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin_change_in_production
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - business-health-network
    restart: unless-stopped
    profiles:
      - monitoring

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  celery_beat_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Custom network for service communication
networks:
  business-health-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16