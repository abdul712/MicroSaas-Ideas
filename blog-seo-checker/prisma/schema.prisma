// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  role      Role     @default(USER)
  plan      Plan     @default(FREE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  accounts           Account[]
  sessions           Session[]
  analyses           SeoAnalysis[]
  keywords           Keyword[]
  competitors        Competitor[]
  reports            Report[]
  subscriptions      Subscription[]
  apiKeys            ApiKey[]
  webhooks           Webhook[]
  notifications      Notification[]
  usageMetrics       UsageMetric[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model SeoAnalysis {
  id             String           @id @default(cuid())
  userId         String
  url            String
  title          String?
  metaDescription String?
  status         AnalysisStatus   @default(PENDING)
  overallScore   Int?
  scores         Json? // Breakdown of individual scores
  recommendations Json? // Array of recommendations
  technicalIssues Json? // Technical SEO issues
  contentAnalysis Json? // Content analysis results
  keywordAnalysis Json? // Keyword analysis
  performanceMetrics Json? // Core Web Vitals, etc.
  competitorData Json? // Competitor comparison
  crawledAt      DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("seo_analyses")
}

model Keyword {
  id              String    @id @default(cuid())
  userId          String
  keyword         String
  searchVolume    Int?
  difficulty      Int?      // 1-100 scale
  cpc             Float?
  competition     String?   // Low, Medium, High
  intent          String?   // Informational, Commercial, etc.
  relatedKeywords Json?     // Array of related keywords
  rankings        Json?     // SERP rankings over time
  opportunities   Json?     // Optimization opportunities
  isTracking      Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, keyword])
  @@map("keywords")
}

model Competitor {
  id            String   @id @default(cuid())
  userId        String
  domain        String
  name          String?
  description   String?
  metrics       Json?    // SEO metrics, traffic, etc.
  keywords      Json?    // Competitor keywords
  backlinks     Json?    // Backlink analysis
  contentGaps   Json?    // Content gap analysis
  lastAnalyzed  DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, domain])
  @@map("competitors")
}

model Report {
  id          String     @id @default(cuid())
  userId      String
  title       String
  description String?
  type        ReportType
  data        Json       // Report data
  format      String     @default("PDF") // PDF, CSV, JSON
  status      String     @default("COMPLETED")
  downloadUrl String?
  expiresAt   DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reports")
}

model Subscription {
  id                String    @id @default(cuid())
  userId            String
  stripeCustomerId  String?   @unique
  stripeSubscriptionId String? @unique
  plan              Plan
  status            String    // active, canceled, past_due, etc.
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean   @default(false)
  metadata          Json?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model ApiKey {
  id          String   @id @default(cuid())
  userId      String
  name        String
  key         String   @unique
  permissions Json?    // Array of permissions
  lastUsed    DateTime?
  isActive    Boolean  @default(true)
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model Webhook {
  id          String   @id @default(cuid())
  userId      String
  url         String
  events      Json     // Array of events to listen for
  secret      String?
  isActive    Boolean  @default(true)
  lastTriggered DateTime?
  failureCount Int     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("webhooks")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // email, push, in-app
  title     String
  message   String
  data      Json?    // Additional notification data
  isRead    Boolean  @default(false)
  sentAt    DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model UsageMetric {
  id        String   @id @default(cuid())
  userId    String
  metric    String   // analyses_run, keywords_tracked, etc.
  value     Int
  period    String   // daily, monthly, etc.
  date      DateTime
  metadata  Json?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, metric, period, date])
  @@map("usage_metrics")
}

// Enums
enum Role {
  USER
  ADMIN
  MODERATOR
}

enum Plan {
  FREE
  BASIC
  PROFESSIONAL
  ENTERPRISE
}

enum AnalysisStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

enum ReportType {
  SEO_AUDIT
  KEYWORD_ANALYSIS
  COMPETITOR_ANALYSIS
  CONTENT_ANALYSIS
  PERFORMANCE_REPORT
  CUSTOM
}